// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqUnUFeSAtbFb77THsmBtm
// Component: rRWDJYvDoW0E

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: Y6gLqOJ3m2d1/component

import { useScreenVariants as useScreenVariantsa96SlEqEsQcV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: A96SlEqESQcV/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import sty from "./PlasmicTopHeader.module.css"; // plasmic-import: rRWDJYvDoW0E/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: cWlmgNGmwySE/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: MEJ7tz7N1GbV/icon

createPlasmicElementProxy;

export type PlasmicTopHeader__VariantMembers = {};
export type PlasmicTopHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicTopHeader__VariantsArgs;
export const PlasmicTopHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicTopHeader__ArgsType = {};
type ArgPropType = keyof PlasmicTopHeader__ArgsType;
export const PlasmicTopHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicTopHeader__OverridesType = {
  header?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  section?: Flex__<"section">;
  img?: Flex__<typeof PlasmicImg__>;
  vidyayatan4?: Flex__<"div">;
};

export interface DefaultTopHeaderProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTopHeader__RenderFunc(props: {
  variants: PlasmicTopHeader__VariantsArgs;
  args: PlasmicTopHeader__ArgsType;
  overrides: PlasmicTopHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsa96SlEqEsQcV()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"header"}
      data-plasmic-override={overrides.header}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.header
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__oAfm9)} />

      <div className={classNames(projectcss.all, sty.freeBox___9M2Sv)}>
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={hasVariant(globalVariants, "screen", "mobileOnly") ? `/` : "#"}
          platform={"nextjs"}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__wJ3Kh)}
            onClick={async event => {
              const $steps = {};

              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = { destination: `/` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHomepage"] != null &&
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await $steps["goToHomepage"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__t9Nu6)}>
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              />

              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "18px"
                    : "27px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "138px"
                    : "170px"
                }
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/vidyayatan_landing_page/images/vidLogoPng3.png",
                        fullWidth: 900,
                        fullHeight: 104,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/vidyayatan_landing_page/images/vidLogoPng3.png",
                        fullWidth: 900,
                        fullHeight: 104,
                        aspectRatio: undefined
                      }
                }
              />

              <div
                data-plasmic-name={"vidyayatan4"}
                data-plasmic-override={overrides.vidyayatan4}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.vidyayatan4
                )}
              >
                {"Enterprise Tech for Scale and Impact"}
              </div>
            </div>
          </div>
        </PlasmicLink__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__v4Aai)}
        >
          <Button2
            className={classNames("__wab_instance", sty.button2__e7Wrs)}
            color={"clear"}
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg__ekjnZ)}
                role={"img"}
              />
            }
            link={`/`}
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg___1E5Ua)}
                role={"img"}
              />
            }
            submitsForm={true}
            target={false}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eNw9Q
              )}
            >
              {"Home"}
            </div>
          </Button2>
          <Button2
            className={classNames("__wab_instance", sty.button2__yJuUf)}
            color={"clear"}
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg__pbBan)}
                role={"img"}
              />
            }
            link={`/case-studies`}
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__iZfJ)}
                role={"img"}
              />
            }
            submitsForm={true}
            target={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gMdOx
              )}
            >
              {"Case Studies"}
            </div>
          </Button2>
          <Button2
            className={classNames("__wab_instance", sty.button2__nyZnK)}
            color={"clear"}
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg__fzyFe)}
                role={"img"}
              />
            }
            link={`/about-us`}
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__nTnum)}
                role={"img"}
              />
            }
            submitsForm={true}
            target={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mmhtC
              )}
              onClick={async event => {
                const $steps = {};

                $steps["goToAboutUs"] = true
                  ? (() => {
                      const actionArgs = { destination: `/about-us` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAboutUs"] != null &&
                  typeof $steps["goToAboutUs"] === "object" &&
                  typeof $steps["goToAboutUs"].then === "function"
                ) {
                  $steps["goToAboutUs"] = await $steps["goToAboutUs"];
                }
              }}
            >
              {"About Us"}
            </div>
          </Button2>
          <Button2
            className={classNames("__wab_instance", sty.button2__xbwzI)}
            color={"clear"}
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg__oatfq)}
                role={"img"}
              />
            }
            link={`/work`}
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__saBro)}
                role={"img"}
              />
            }
            submitsForm={true}
            target={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dt7G9
              )}
            >
              {"Industries"}
            </div>
          </Button2>
          <Button2
            className={classNames("__wab_instance", sty.button2__nsoj7)}
            color={"clear"}
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg__qeYVd)}
                role={"img"}
              />
            }
            link={`/new-page`}
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__uZzXg)}
                role={"img"}
              />
            }
            submitsForm={true}
            target={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hUye
              )}
            >
              {"Contact Us"}
            </div>
          </Button2>
        </Stack__>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  header: ["header", "link", "section", "img", "vidyayatan4"],
  link: ["link", "section", "img", "vidyayatan4"],
  section: ["section"],
  img: ["img"],
  vidyayatan4: ["vidyayatan4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  header: "div";
  link: "a";
  section: "section";
  img: typeof PlasmicImg__;
  vidyayatan4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTopHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTopHeader__VariantsArgs;
    args?: PlasmicTopHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTopHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTopHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTopHeader__ArgProps,
          internalVariantPropNames: PlasmicTopHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTopHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header") {
    func.displayName = "PlasmicTopHeader";
  } else {
    func.displayName = `PlasmicTopHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicTopHeader = Object.assign(
  // Top-level PlasmicTopHeader renders the root element
  makeNodeComponent("header"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    section: makeNodeComponent("section"),
    img: makeNodeComponent("img"),
    vidyayatan4: makeNodeComponent("vidyayatan4"),

    // Metadata about props expected for PlasmicTopHeader
    internalVariantProps: PlasmicTopHeader__VariantProps,
    internalArgProps: PlasmicTopHeader__ArgProps
  }
);

export default PlasmicTopHeader;
/* prettier-ignore-end */
