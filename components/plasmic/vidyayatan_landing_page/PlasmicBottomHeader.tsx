// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqUnUFeSAtbFb77THsmBtm
// Component: eJzIS1yT3FXa

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: Y6gLqOJ3m2d1/component

import { useScreenVariants as useScreenVariantsa96SlEqEsQcV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: A96SlEqESQcV/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import sty from "./PlasmicBottomHeader.module.css"; // plasmic-import: eJzIS1yT3FXa/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: cWlmgNGmwySE/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: MEJ7tz7N1GbV/icon

createPlasmicElementProxy;

export type PlasmicBottomHeader__VariantMembers = {};
export type PlasmicBottomHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicBottomHeader__VariantsArgs;
export const PlasmicBottomHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicBottomHeader__ArgsType = {};
type ArgPropType = keyof PlasmicBottomHeader__ArgsType;
export const PlasmicBottomHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicBottomHeader__OverridesType = {
  header2?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultBottomHeaderProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBottomHeader__RenderFunc(props: {
  variants: PlasmicBottomHeader__VariantsArgs;
  args: PlasmicBottomHeader__ArgsType;
  overrides: PlasmicBottomHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsa96SlEqEsQcV()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"header2"}
      data-plasmic-override={overrides.header2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.header2
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Button2
          className={classNames("__wab_instance", sty.button2__mOgf7)}
          color={"clear"}
          endIcon={
            <Icon38Icon
              className={classNames(projectcss.all, sty.svg___8DqPb)}
              role={"img"}
            />
          }
          onClick={async event => {
            const $steps = {};

            $steps["updateVariant"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }
                    undefined;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateVariant"] != null &&
              typeof $steps["updateVariant"] === "object" &&
              typeof $steps["updateVariant"].then === "function"
            ) {
              $steps["updateVariant"] = await $steps["updateVariant"];
            }
          }}
          startIcon={
            <CheckSvgIcon
              className={classNames(projectcss.all, sty.svg__sp3Kp)}
              role={"img"}
            />
          }
          submitsForm={true}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bFjNk
            )}
          >
            {"Product Engineering Services"}
          </div>
        </Button2>
        <Button2
          className={classNames("__wab_instance", sty.button2__jQ911)}
          color={"clear"}
          endIcon={
            <Icon38Icon
              className={classNames(projectcss.all, sty.svg__ncToP)}
              role={"img"}
            />
          }
          startIcon={
            <CheckSvgIcon
              className={classNames(projectcss.all, sty.svg___2KTym)}
              role={"img"}
            />
          }
          submitsForm={true}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iLfom
            )}
          >
            {"Data and Analytics"}
          </div>
        </Button2>
        <Button2
          className={classNames("__wab_instance", sty.button2___4D9Uk)}
          color={"clear"}
          endIcon={
            <Icon38Icon
              className={classNames(projectcss.all, sty.svg__ts7M)}
              role={"img"}
            />
          }
          startIcon={
            <CheckSvgIcon
              className={classNames(projectcss.all, sty.svg__zsotE)}
              role={"img"}
            />
          }
          submitsForm={true}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cMaXn
            )}
          >
            {"Cloud and DevOps"}
          </div>
        </Button2>
        <Button2
          className={classNames("__wab_instance", sty.button2___0DDe5)}
          color={"clear"}
          endIcon={
            <Icon38Icon
              className={classNames(projectcss.all, sty.svg___639Gs)}
              role={"img"}
            />
          }
          startIcon={
            <CheckSvgIcon
              className={classNames(projectcss.all, sty.svg__jRlc)}
              role={"img"}
            />
          }
          submitsForm={true}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__v7Vwo
            )}
          >
            {"Intelligent Automation"}
          </div>
        </Button2>
        <Button2
          className={classNames("__wab_instance", sty.button2__fxDcf)}
          endIcon={
            <Icon38Icon
              className={classNames(projectcss.all, sty.svg__fawL)}
              role={"img"}
            />
          }
          startIcon={
            <CheckSvgIcon
              className={classNames(projectcss.all, sty.svg___69Jbn)}
              role={"img"}
            />
          }
          submitsForm={true}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jmAIb
            )}
          >
            {"Get in touch"}
          </div>
        </Button2>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  header2: ["header2", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  header2: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBottomHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBottomHeader__VariantsArgs;
    args?: PlasmicBottomHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBottomHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBottomHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBottomHeader__ArgProps,
          internalVariantPropNames: PlasmicBottomHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBottomHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header2") {
    func.displayName = "PlasmicBottomHeader";
  } else {
    func.displayName = `PlasmicBottomHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicBottomHeader = Object.assign(
  // Top-level PlasmicBottomHeader renders the root element
  makeNodeComponent("header2"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicBottomHeader
    internalVariantProps: PlasmicBottomHeader__VariantProps,
    internalArgProps: PlasmicBottomHeader__ArgProps
  }
);

export default PlasmicBottomHeader;
/* prettier-ignore-end */
