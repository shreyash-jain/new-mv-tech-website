// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqUnUFeSAtbFb77THsmBtm
// Component: JNOw3B7fPGe3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: Y6gLqOJ3m2d1/component

import { useScreenVariants as useScreenVariantsa96SlEqEsQcV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: A96SlEqESQcV/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import sty from "./PlasmicVidFooter.module.css"; // plasmic-import: JNOw3B7fPGe3/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: thtyH0Ki-Cp6/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: cWlmgNGmwySE/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: MEJ7tz7N1GbV/icon

createPlasmicElementProxy;

export type PlasmicVidFooter__VariantMembers = {};
export type PlasmicVidFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicVidFooter__VariantsArgs;
export const PlasmicVidFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicVidFooter__ArgsType = {};
type ArgPropType = keyof PlasmicVidFooter__ArgsType;
export const PlasmicVidFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicVidFooter__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultVidFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVidFooter__RenderFunc(props: {
  variants: PlasmicVidFooter__VariantsArgs;
  args: PlasmicVidFooter__ArgsType;
  overrides: PlasmicVidFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsa96SlEqEsQcV()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__xDasA)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__zqgJ)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"40px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"40px"}
              src={{
                src: "/plasmic/vidyayatan_landing_page/images/untitledArtworkPng.png",
                fullWidth: 2048,
                fullHeight: 2048,
                aspectRatio: undefined
              }}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cmgnf)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1BxJm
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToContactUs"] = true
                    ? (() => {
                        const actionArgs = { destination: `/new-page` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToContactUs"] != null &&
                    typeof $steps["goToContactUs"] === "object" &&
                    typeof $steps["goToContactUs"].then === "function"
                  ) {
                    $steps["goToContactUs"] = await $steps["goToContactUs"];
                  }
                }}
              >
                {"Connect with Us"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__q6Zm2)}
              >
                <Icon3Icon
                  className={classNames(projectcss.all, sty.svg__s22Nt)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHttpsWwwLinkedinComCompany101389756"] = true
                      ? (() => {
                          const actionArgs = {
                            destination:
                              "https://www.linkedin.com/company/101389756/"
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHttpsWwwLinkedinComCompany101389756"] !=
                        null &&
                      typeof $steps[
                        "goToHttpsWwwLinkedinComCompany101389756"
                      ] === "object" &&
                      typeof $steps["goToHttpsWwwLinkedinComCompany101389756"]
                        .then === "function"
                    ) {
                      $steps["goToHttpsWwwLinkedinComCompany101389756"] =
                        await $steps["goToHttpsWwwLinkedinComCompany101389756"];
                    }
                  }}
                  role={"img"}
                />
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.column__qiP7Z)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kUvw0)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__j1Yk9
              )}
            >
              {"Company"}
            </div>
            <Button2
              className={classNames("__wab_instance", sty.button2__cQwd6)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__r97Z1)}
                  role={"img"}
                />
              }
              link={`/about-us`}
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__lwT0L)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gSdw2
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToAboutUs"] = true
                    ? (() => {
                        const actionArgs = { destination: `/about-us` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToAboutUs"] != null &&
                    typeof $steps["goToAboutUs"] === "object" &&
                    typeof $steps["goToAboutUs"].then === "function"
                  ) {
                    $steps["goToAboutUs"] = await $steps["goToAboutUs"];
                  }
                }}
              >
                {"About"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__gb9P)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__xCQta)}
                  role={"img"}
                />
              }
              link={`/new-page`}
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg___2RvVi)}
                  role={"img"}
                />
              }
              submitsForm={(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kahli
                )}
              >
                {"Contact us"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__eBfGg)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__r5DyL)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__sA6F6)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cdB6X
                )}
              >
                {"Careers"}
              </div>
            </Button2>
          </Stack__>
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "img"],
  columns: ["columns", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVidFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVidFooter__VariantsArgs;
    args?: PlasmicVidFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVidFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVidFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVidFooter__ArgProps,
          internalVariantPropNames: PlasmicVidFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVidFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVidFooter";
  } else {
    func.displayName = `PlasmicVidFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicVidFooter = Object.assign(
  // Top-level PlasmicVidFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicVidFooter
    internalVariantProps: PlasmicVidFooter__VariantProps,
    internalArgProps: PlasmicVidFooter__ArgProps
  }
);

export default PlasmicVidFooter;
/* prettier-ignore-end */
