// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqUnUFeSAtbFb77THsmBtm
// Component: iQeQpDeR1Inv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: Y6gLqOJ3m2d1/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button3 from "../../Button3"; // plasmic-import: eqhmLK-nggXR/component

import { useScreenVariants as useScreenVariantsa96SlEqEsQcV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: A96SlEqESQcV/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import sty from "./PlasmicNewHeaderComponent.module.css"; // plasmic-import: iQeQpDeR1Inv/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: cWlmgNGmwySE/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: MEJ7tz7N1GbV/icon

createPlasmicElementProxy;

export type PlasmicNewHeaderComponent__VariantMembers = {};
export type PlasmicNewHeaderComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewHeaderComponent__VariantsArgs;
export const PlasmicNewHeaderComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNewHeaderComponent__ArgsType = {};
type ArgPropType = keyof PlasmicNewHeaderComponent__ArgsType;
export const PlasmicNewHeaderComponent__ArgProps = new Array<ArgPropType>();

export type PlasmicNewHeaderComponent__OverridesType = {
  headerHeroSection?: Flex__<"div">;
  h1?: Flex__<"h1">;
  button2?: Flex__<typeof Button2>;
  embedHtml?: Flex__<typeof Embed>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultNewHeaderComponentProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewHeaderComponent__RenderFunc(props: {
  variants: PlasmicNewHeaderComponent__VariantsArgs;
  args: PlasmicNewHeaderComponent__ArgsType;
  overrides: PlasmicNewHeaderComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsa96SlEqEsQcV()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"headerHeroSection"}
      data-plasmic-override={overrides.headerHeroSection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.headerHeroSection
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__acAc2)}
      />

      <div className={classNames(projectcss.all, sty.freeBox__yTc2E)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___9Zz8K)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__x2I45)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tybYi
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                "Farm Decision Making & Management Software"
              ) : (
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {"Farm Decision Making & Management Software"}
                  </span>
                </React.Fragment>
              )}
            </div>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  <React.Fragment>
                    {"Maximise your farm yield with "}
                  </React.Fragment>
                  {
                    <span
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.span__eBok
                      )}
                    >
                      {"cutting-edge technology"}
                    </span>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <React.Fragment>
                    {"Maximise your farm yield with "}
                  </React.Fragment>
                  {
                    <span
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.span__r6QnS
                      )}
                    >
                      {"cutting-edge technology"}
                    </span>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              )}
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pozDn
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
              ) : (
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {"without making it difficult to manage your farm"}
                  </span>
                  <React.Fragment>{"\n\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#101010" }}
                  >
                    {""}
                  </span>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <span
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.span__jtVOf
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#101010", fontWeight: 700 }}
                        >
                          {"Vidyayatan Infotech"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#101010" }}
                        >
                          {
                            " offers integrated solutions and helps rural producers achieve more efficiency and predictability."
                          }
                        </span>
                      </React.Fragment>
                    </span>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              )}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wUhL)}
            >
              <Button2
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames("__wab_instance", sty.button2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__nAukl)}>
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={
                      '<!-- Calendly link widget begin -->\n<link href="https://assets.calendly.com/assets/external/widget.css" rel="stylesheet">\n<script src="https://assets.calendly.com/assets/external/widget.js" type="text/javascript" async></script>\n<a href=""  style="color:white;text-decoration:none"  onclick="Calendly.initPopupWidget({url: \'https://calendly.com/shreyashjain1996/connect-with-vidyayatan?hide_event_type_details=1&hide_gdpr_banner=1\'});return false;">Book Free Consultation</a>\n<!-- Calendly link widget end -->\n'
                    }
                  />
                </div>
              </Button2>
            </Stack__>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__r5C5L)}>
                <Button3
                  className={classNames("__wab_instance", sty.button3__yyz7T)}
                  color={"blueBorder"}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__wqZo6)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__p9Glc)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9RcKs
                    )}
                  >
                    {"Learn More"}
                  </div>
                </Button3>
                <Button3
                  className={classNames("__wab_instance", sty.button3__zYpPt)}
                  color={"blueBorder"}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__rrxWl)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__wSzP)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__okygR
                    )}
                  >
                    {"Learn More"}
                  </div>
                </Button3>
              </div>
            ) : null}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___9QFoE)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "0px"
                  : "auto"
              }
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "100%"
                  : "741px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/vidyayatan_landing_page/images/unnamed4Jpg.jpg",
                fullWidth: 1200,
                fullHeight: 600,
                aspectRatio: undefined
              }}
            />
          </div>
        </Stack__>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  headerHeroSection: ["headerHeroSection", "h1", "button2", "embedHtml", "img"],
  h1: ["h1"],
  button2: ["button2", "embedHtml"],
  embedHtml: ["embedHtml"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  headerHeroSection: "div";
  h1: "h1";
  button2: typeof Button2;
  embedHtml: typeof Embed;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewHeaderComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewHeaderComponent__VariantsArgs;
    args?: PlasmicNewHeaderComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewHeaderComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewHeaderComponent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewHeaderComponent__ArgProps,
          internalVariantPropNames: PlasmicNewHeaderComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewHeaderComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "headerHeroSection") {
    func.displayName = "PlasmicNewHeaderComponent";
  } else {
    func.displayName = `PlasmicNewHeaderComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicNewHeaderComponent = Object.assign(
  // Top-level PlasmicNewHeaderComponent renders the root element
  makeNodeComponent("headerHeroSection"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    button2: makeNodeComponent("button2"),
    embedHtml: makeNodeComponent("embedHtml"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicNewHeaderComponent
    internalVariantProps: PlasmicNewHeaderComponent__VariantProps,
    internalArgProps: PlasmicNewHeaderComponent__ArgProps
  }
);

export default PlasmicNewHeaderComponent;
/* prettier-ignore-end */
