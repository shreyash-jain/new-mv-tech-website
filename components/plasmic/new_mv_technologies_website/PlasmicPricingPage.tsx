// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: utUs84Uai2sd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import PricingCard from "../../PricingCard"; // plasmic-import: N0zyKDoi7jWj/component
import Button2 from "../../Button2"; // plasmic-import: iFFcBUnvZUl0/component
import FaqSection from "../../FaqSection"; // plasmic-import: BSnSueyvgk6P/component
import NavFooter from "../../NavFooter"; // plasmic-import: s0a682-ToGsq/component
import NavHeader from "../../NavHeader"; // plasmic-import: pZ9Yrp1wEL8X/component

import { useScreenVariants as useScreenVariantsptc9VYm7Ur9B } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PTC9vYM7UR9b/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicPricingPage.module.css"; // plasmic-import: utUs84Uai2sd/css

import Frame17Icon from "./icons/PlasmicIcon__Frame17"; // plasmic-import: qCObakUSkcsr/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tSFoGfIVWAwT/icon
import Frame9Icon from "./icons/PlasmicIcon__Frame9"; // plasmic-import: BeC73lXIzA9b/icon
import Frame18Icon from "./icons/PlasmicIcon__Frame18"; // plasmic-import: n4n-qgslZ89z/icon

createPlasmicElementProxy;

export type PlasmicPricingPage__VariantMembers = {};
export type PlasmicPricingPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicPricingPage__VariantsArgs;
export const PlasmicPricingPage__VariantProps = new Array<VariantPropType>();

export type PlasmicPricingPage__ArgsType = {};
type ArgPropType = keyof PlasmicPricingPage__ArgsType;
export const PlasmicPricingPage__ArgProps = new Array<ArgPropType>();

export type PlasmicPricingPage__OverridesType = {
  root?: Flex__<"div">;
  heroSection?: Flex__<"section">;
  redFreeBox?: Flex__<"div">;
  redFreeBox2?: Flex__<"div">;
  redFreeBox3?: Flex__<"div">;
  blueFreeBox?: Flex__<"div">;
  blueFreeBox2?: Flex__<"div">;
  blueFreeBox3?: Flex__<"div">;
  whatsIncludedInAllPlans?: Flex__<"section">;
  notSureWhichPlanIsBest?: Flex__<"section">;
  img?: Flex__<typeof PlasmicImg__>;
  faqSection?: Flex__<typeof FaqSection>;
  navFooter?: Flex__<typeof NavFooter>;
  navHeader?: Flex__<typeof NavHeader>;
};

export interface DefaultPricingPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPricingPage__RenderFunc(props: {
  variants: PlasmicPricingPage__VariantsArgs;
  args: PlasmicPricingPage__ArgsType;
  overrides: PlasmicPricingPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsptc9VYm7Ur9B()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_vidyayatan_landing_page_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_apple_css.plasmic_tokens,
            plasmic_vercel_workflow_css.plasmic_tokens,
            plasmic_saa_s_website_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"heroSection"}
            data-plasmic-override={overrides.heroSection}
            className={classNames(projectcss.all, sty.heroSection)}
          >
            <div
              data-plasmic-name={"redFreeBox"}
              data-plasmic-override={overrides.redFreeBox}
              className={classNames(projectcss.all, sty.redFreeBox)}
            />

            <div
              data-plasmic-name={"redFreeBox2"}
              data-plasmic-override={overrides.redFreeBox2}
              className={classNames(projectcss.all, sty.redFreeBox2)}
            />

            <div
              data-plasmic-name={"redFreeBox3"}
              data-plasmic-override={overrides.redFreeBox3}
              className={classNames(projectcss.all, sty.redFreeBox3)}
            />

            <div
              data-plasmic-name={"blueFreeBox"}
              data-plasmic-override={overrides.blueFreeBox}
              className={classNames(projectcss.all, sty.blueFreeBox)}
            />

            <div
              data-plasmic-name={"blueFreeBox2"}
              data-plasmic-override={overrides.blueFreeBox2}
              className={classNames(projectcss.all, sty.blueFreeBox2)}
            />

            <div
              data-plasmic-name={"blueFreeBox3"}
              data-plasmic-override={overrides.blueFreeBox3}
              className={classNames(projectcss.all, sty.blueFreeBox3)}
            />

            <section
              data-plasmic-name={"whatsIncludedInAllPlans"}
              data-plasmic-override={overrides.whatsIncludedInAllPlans}
              className={classNames(
                projectcss.all,
                sty.whatsIncludedInAllPlans
              )}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__d6Q4P)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___1Mscc)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vRm9U
                    )}
                  >
                    {"What's included in all plans?"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eD67R)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sO9Yy
                    )}
                  >
                    {
                      "We ensure that users receive comprehensive support and value for their investment, making it easier to manage and grow their teams effectively."
                    }
                  </div>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__zi40V)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__whYfZ)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uhlRz)}
                  >
                    <Frame17Icon
                      className={classNames(projectcss.all, sty.svg___3Y2Tc)}
                      role={"img"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__pVqH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ow4M6
                        )}
                      >
                        {"Affordable Quality Talent"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dj9G
                        )}
                      >
                        {" Access skilled professionals at competitive rates."}
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1NmQ)}
                  >
                    <Frame17Icon
                      className={classNames(projectcss.all, sty.svg__um3Nj)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___94AvX
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m2ANv
                        )}
                      >
                        {"Scalability"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pFk1K
                        )}
                      >
                        {
                          "Easily scale teams or services with better rates as you grow."
                        }
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__laSvd)}
                  >
                    <Frame17Icon
                      className={classNames(projectcss.all, sty.svg__uzwfa)}
                      role={"img"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__n3Z3E)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dla4
                        )}
                      >
                        {"Fixed Monthly Fees"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fkUdx
                        )}
                      >
                        {"Predictable pricing with no hidden costs."}
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__drBo)}
                  >
                    <Frame17Icon
                      className={classNames(projectcss.all, sty.svg__vaS8N)}
                      role={"img"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__kyPB)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yn7CH
                        )}
                      >
                        {"Free Consultation"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gwlcJ
                        )}
                      >
                        {"Initial consultations at no charge."}
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yg0X)}
                  >
                    <Frame17Icon
                      className={classNames(projectcss.all, sty.svg__c51Fq)}
                      role={"img"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__h49JJ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oKc
                        )}
                      >
                        {"Fast Kick-off"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1JCeT
                        )}
                      >
                        {"Start services up to 3x faster than average."}
                      </div>
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column___8Ylbc)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__wYjfY)}
                  >
                    <Frame17Icon
                      className={classNames(projectcss.all, sty.svg__b4JfF)}
                      role={"img"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__uPmQ4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m7IC5
                        )}
                      >
                        {"No Recruitment Fees"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xwgnv
                        )}
                      >
                        {"No additional or hidden recruitment fees."}
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hJbIb)}
                  >
                    <Frame17Icon
                      className={classNames(projectcss.all, sty.svg__uCok3)}
                      role={"img"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__y8Fs8)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4Vtyk
                        )}
                      >
                        {"Monthly Reporting"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bYsiq
                        )}
                      >
                        {"Receive performance reports and timesheets monthly."}
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gIisk)}
                  >
                    <Frame17Icon
                      className={classNames(projectcss.all, sty.svg__pk8Kg)}
                      role={"img"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__rnGp6)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rfvpS
                        )}
                      >
                        {"Free Tool Access"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o9IKp
                        )}
                      >
                        {"All plans include necessary tools at no extra cost."}
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___8SkJ3)}
                  >
                    <Frame17Icon
                      className={classNames(projectcss.all, sty.svg__lhRsp)}
                      role={"img"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__qwtJb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Mqsw
                        )}
                      >
                        {"Dedicated Account Executive"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jJuRl
                        )}
                      >
                        {
                          "Personalized support with a dedicated account executive."
                        }
                      </div>
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
            </section>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dgtOe)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__dBjDv)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__egbCk
                  )}
                >
                  {"Cost-Effective Plans \nDesigned for Growth"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__qjYbp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__agBpw
                  )}
                >
                  {
                    "Our services are built for growth-focused companies, agencies, and enterprises looking for reliable and cost-effective development."
                  }
                </div>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__hlSnv)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__gfSx)}
              >
                <PricingCard
                  className={classNames(
                    "__wab_instance",
                    sty.pricingCard__cSow0
                  )}
                  slot11={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ggNq6
                      )}
                    >
                      {"82 NPS"}
                    </div>
                  }
                />
              </Stack__>
              <div className={classNames(projectcss.all, sty.column___26AL)}>
                <PricingCard
                  className={classNames(
                    "__wab_instance",
                    sty.pricingCard__oE0Nf
                  )}
                  colours={["white"]}
                  slot={"Scaled Staff Augmentation Team"}
                  slot10={"per hour"}
                  slot11={"Discounts for larger teams"}
                  slot2={"$ 7"}
                  slot4={"Experienced, quality African talent"}
                  slot5={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qa1H
                      )}
                    >
                      {"Free consultation and no upfront fees"}
                    </div>
                  }
                  slot6={"Access to 8000+ talent resources"}
                  slot7={"Fixed monthly rates with no overtime"}
                  slot8={"Switch out underperforming talent for free"}
                  slot9={"21 days to align, meet and kick-off"}
                >
                  {"Scalable teams to complement your company"}
                </PricingCard>
              </div>
            </Stack__>
          </section>
          <section
            data-plasmic-name={"notSureWhichPlanIsBest"}
            data-plasmic-override={overrides.notSureWhichPlanIsBest}
            className={classNames(projectcss.all, sty.notSureWhichPlanIsBest)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5ZRJa)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__g62Wf)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cxC6L
                  )}
                >
                  {"Wondering which plan is right for you?"}
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iHSU)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x3Kf4
                  )}
                >
                  {
                    "Worry no more, we\u2019re here to help you find the perfect plan tailored to your needs. Fill out the Google form, and we\u2019ll guide you to the best option for your team\u2019s success"
                  }
                </div>
                <Button2
                  className={classNames("__wab_instance", sty.button2__otGdp)}
                  color={"softPeriwinkleBlue"}
                  endIcon={
                    <Frame9Icon
                      className={classNames(projectcss.all, sty.svg__yv3Hu)}
                      role={"img"}
                    />
                  }
                  showEndIcon={true}
                >
                  {"Google Form"}
                </Button2>
              </Stack__>
            </Stack__>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"1080px"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/frame1000000970Png.png",
                fullWidth: 10600,
                fullHeight: 4084,
                aspectRatio: undefined
              }}
            />

            <Button2
              className={classNames("__wab_instance", sty.button2__rbJxH)}
              endIcon={
                <Frame18Icon
                  className={classNames(projectcss.all, sty.svg__bLNi4)}
                  role={"img"}
                />
              }
              link={"https://calendar.app.google/7GAyDKQLPvjA5rca6"}
              shape={"rounded"}
              target={true}
            >
              {"Talk to Our Expert"}
            </Button2>
          </section>
          <FaqSection
            data-plasmic-name={"faqSection"}
            data-plasmic-override={overrides.faqSection}
            className={classNames("__wab_instance", sty.faqSection)}
          />

          <NavFooter
            data-plasmic-name={"navFooter"}
            data-plasmic-override={overrides.navFooter}
            className={classNames("__wab_instance", sty.navFooter)}
          />

          <NavHeader
            data-plasmic-name={"navHeader"}
            data-plasmic-override={overrides.navHeader}
            className={classNames("__wab_instance", sty.navHeader)}
            scrolledVariant={(() => {
              try {
                return $ctx.isScrolled;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "heroSection",
    "redFreeBox",
    "redFreeBox2",
    "redFreeBox3",
    "blueFreeBox",
    "blueFreeBox2",
    "blueFreeBox3",
    "whatsIncludedInAllPlans",
    "notSureWhichPlanIsBest",
    "img",
    "faqSection",
    "navFooter",
    "navHeader"
  ],
  heroSection: [
    "heroSection",
    "redFreeBox",
    "redFreeBox2",
    "redFreeBox3",
    "blueFreeBox",
    "blueFreeBox2",
    "blueFreeBox3",
    "whatsIncludedInAllPlans"
  ],
  redFreeBox: ["redFreeBox"],
  redFreeBox2: ["redFreeBox2"],
  redFreeBox3: ["redFreeBox3"],
  blueFreeBox: ["blueFreeBox"],
  blueFreeBox2: ["blueFreeBox2"],
  blueFreeBox3: ["blueFreeBox3"],
  whatsIncludedInAllPlans: ["whatsIncludedInAllPlans"],
  notSureWhichPlanIsBest: ["notSureWhichPlanIsBest", "img"],
  img: ["img"],
  faqSection: ["faqSection"],
  navFooter: ["navFooter"],
  navHeader: ["navHeader"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  heroSection: "section";
  redFreeBox: "div";
  redFreeBox2: "div";
  redFreeBox3: "div";
  blueFreeBox: "div";
  blueFreeBox2: "div";
  blueFreeBox3: "div";
  whatsIncludedInAllPlans: "section";
  notSureWhichPlanIsBest: "section";
  img: typeof PlasmicImg__;
  faqSection: typeof FaqSection;
  navFooter: typeof NavFooter;
  navHeader: typeof NavHeader;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricingPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricingPage__VariantsArgs;
    args?: PlasmicPricingPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPricingPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPricingPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPricingPage__ArgProps,
          internalVariantPropNames: PlasmicPricingPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPricingPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingPage";
  } else {
    func.displayName = `PlasmicPricingPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "qg9BUJrNtisePZMs8FM4BQ"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPricingPage = Object.assign(
  // Top-level PlasmicPricingPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    heroSection: makeNodeComponent("heroSection"),
    redFreeBox: makeNodeComponent("redFreeBox"),
    redFreeBox2: makeNodeComponent("redFreeBox2"),
    redFreeBox3: makeNodeComponent("redFreeBox3"),
    blueFreeBox: makeNodeComponent("blueFreeBox"),
    blueFreeBox2: makeNodeComponent("blueFreeBox2"),
    blueFreeBox3: makeNodeComponent("blueFreeBox3"),
    whatsIncludedInAllPlans: makeNodeComponent("whatsIncludedInAllPlans"),
    notSureWhichPlanIsBest: makeNodeComponent("notSureWhichPlanIsBest"),
    img: makeNodeComponent("img"),
    faqSection: makeNodeComponent("faqSection"),
    navFooter: makeNodeComponent("navFooter"),
    navHeader: makeNodeComponent("navHeader"),

    // Metadata about props expected for PlasmicPricingPage
    internalVariantProps: PlasmicPricingPage__VariantProps,
    internalArgProps: PlasmicPricingPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPricingPage;
/* prettier-ignore-end */
