// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: s0a682-ToGsq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Tab2 from "../../Tab2"; // plasmic-import: i1-t57rGFqt8/component

import { useScreenVariants as useScreenVariantsptc9VYm7Ur9B } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PTC9vYM7UR9b/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicNavFooter.module.css"; // plasmic-import: s0a682-ToGsq/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tSFoGfIVWAwT/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: FoPRmBUdi-FM/icon

createPlasmicElementProxy;

export type PlasmicNavFooter__VariantMembers = {};
export type PlasmicNavFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavFooter__VariantsArgs;
export const PlasmicNavFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicNavFooter__ArgsType = {};
type ArgPropType = keyof PlasmicNavFooter__ArgsType;
export const PlasmicNavFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicNavFooter__OverridesType = {
  footer?: Flex__<"section">;
  columns?: Flex__<"div">;
  tab2?: Flex__<typeof Tab2>;
  tab3?: Flex__<typeof Tab2>;
  tab21?: Flex__<typeof Tab2>;
  tab5?: Flex__<typeof Tab2>;
  tab4?: Flex__<typeof Tab2>;
  tab18?: Flex__<typeof Tab2>;
  tab19?: Flex__<typeof Tab2>;
  tab20?: Flex__<typeof Tab2>;
  tab23?: Flex__<typeof Tab2>;
  tab35?: Flex__<typeof Tab2>;
  tab36?: Flex__<typeof Tab2>;
  tab37?: Flex__<typeof Tab2>;
  tab38?: Flex__<typeof Tab2>;
  tab39?: Flex__<typeof Tab2>;
  tab40?: Flex__<typeof Tab2>;
  tab41?: Flex__<typeof Tab2>;
  tab42?: Flex__<typeof Tab2>;
  tab43?: Flex__<typeof Tab2>;
  tab44?: Flex__<typeof Tab2>;
  tab45?: Flex__<typeof Tab2>;
  tab10?: Flex__<typeof Tab2>;
  tab11?: Flex__<typeof Tab2>;
  tab12?: Flex__<typeof Tab2>;
  tab13?: Flex__<typeof Tab2>;
  tab14?: Flex__<typeof Tab2>;
  tab15?: Flex__<typeof Tab2>;
  tab16?: Flex__<typeof Tab2>;
  tab17?: Flex__<typeof Tab2>;
  tab27?: Flex__<typeof Tab2>;
  tab22?: Flex__<typeof Tab2>;
  tab24?: Flex__<typeof Tab2>;
  tab25?: Flex__<typeof Tab2>;
  tab26?: Flex__<typeof Tab2>;
};

export interface DefaultNavFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavFooter__RenderFunc(props: {
  variants: PlasmicNavFooter__VariantsArgs;
  args: PlasmicNavFooter__ArgsType;
  overrides: PlasmicNavFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tab2.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab3.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab4.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab5.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab10.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab11.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab12.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab13.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab14.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab15.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab16.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab17.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab18.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab19.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab20.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab21.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab35.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab36.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab37.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab38.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab39.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab40.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab41.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab42.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab43.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab44.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab45.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab23.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab22.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab24.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab25.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab26.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab27.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsptc9VYm7Ur9B()
  });

  return (
    <section
      data-plasmic-name={"footer"}
      data-plasmic-override={overrides.footer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_vidyayatan_landing_page_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.footer
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__s1EUd)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vNgXs)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___4Dwh3)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "48px"
                  : "56px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/image80.png",
                fullWidth: 720,
                fullHeight: 720,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6LsMb
              )}
            >
              {"MV Technologies"}
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kmlhM
            )}
          >
            {
              "Trusted by industry leaders, MV Technologies empowers businesses with cutting-edge software solutions and expert development teams. As a premier tech company, we drive innovation and efficiency across multiple sectors from our headquarters in Limpopo, South Africa"
            }
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___795W0)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8UTxt
              )}
            >
              {"Follow us on "}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fbClw)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__soUbd)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"24px"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps[
                    "goToHttpsWwwLinkedinComCompanyVidyayatanOriginalSubdomainIn"
                  ] = true
                    ? (() => {
                        const actionArgs = {
                          destination:
                            "https://www.linkedin.com/company/vidyayatan/?originalSubdomain=in"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps[
                      "goToHttpsWwwLinkedinComCompanyVidyayatanOriginalSubdomainIn"
                    ] != null &&
                    typeof $steps[
                      "goToHttpsWwwLinkedinComCompanyVidyayatanOriginalSubdomainIn"
                    ] === "object" &&
                    typeof $steps[
                      "goToHttpsWwwLinkedinComCompanyVidyayatanOriginalSubdomainIn"
                    ].then === "function"
                  ) {
                    $steps[
                      "goToHttpsWwwLinkedinComCompanyVidyayatanOriginalSubdomainIn"
                    ] = await $steps[
                      "goToHttpsWwwLinkedinComCompanyVidyayatanOriginalSubdomainIn"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/new_mv_technologies_website/images/image20.svg",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: 1
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__zj7IJ)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"24px"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps[
                    "goToHttpsWaMe919425677707TextHello20Id20Like20To20Inquire20About20Your20Services"
                  ] = true
                    ? (() => {
                        const actionArgs = {
                          destination:
                            "https://wa.me/919425677707?text=Hello!%20I'd%20like%20to%20inquire%20about%20your%20services."
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps[
                      "goToHttpsWaMe919425677707TextHello20Id20Like20To20Inquire20About20Your20Services"
                    ] != null &&
                    typeof $steps[
                      "goToHttpsWaMe919425677707TextHello20Id20Like20To20Inquire20About20Your20Services"
                    ] === "object" &&
                    typeof $steps[
                      "goToHttpsWaMe919425677707TextHello20Id20Like20To20Inquire20About20Your20Services"
                    ].then === "function"
                  ) {
                    $steps[
                      "goToHttpsWaMe919425677707TextHello20Id20Like20To20Inquire20About20Your20Services"
                    ] = await $steps[
                      "goToHttpsWaMe919425677707TextHello20Id20Like20To20Inquire20About20Your20Services"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/new_mv_technologies_website/images/image36.png",
                  fullWidth: 1659,
                  fullHeight: 2500,
                  aspectRatio: undefined
                }}
              />
            </Stack__>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__xKnHn)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nHTb)}>
            <Tab2
              data-plasmic-name={"tab2"}
              data-plasmic-override={overrides.tab2}
              className={classNames("__wab_instance", sty.tab2)}
              isActive={generateStateValueProp($state, ["tab2", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab2",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qi7Y
                )}
              >
                {"Company"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab3"}
              data-plasmic-override={overrides.tab3}
              className={classNames("__wab_instance", sty.tab3)}
              isActive={generateStateValueProp($state, ["tab3", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab3",
                "isActive"
              ])}
              pageRoute={`/about-vidyayatan`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nfPxf
                )}
              >
                {"About Us"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab21"}
              data-plasmic-override={overrides.tab21}
              className={classNames("__wab_instance", sty.tab21)}
              isActive={generateStateValueProp($state, ["tab21", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab21",
                "isActive"
              ])}
              pageRoute={`/why-mv-technologies`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oAvpx
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToWhyVidyayatan"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/why-mv-technologies`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToWhyVidyayatan"] != null &&
                    typeof $steps["goToWhyVidyayatan"] === "object" &&
                    typeof $steps["goToWhyVidyayatan"].then === "function"
                  ) {
                    $steps["goToWhyVidyayatan"] = await $steps[
                      "goToWhyVidyayatan"
                    ];
                  }
                }}
              >
                {"Why MV Technologies?"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab5"}
              data-plasmic-override={overrides.tab5}
              className={classNames("__wab_instance", sty.tab5)}
              isActive={generateStateValueProp($state, ["tab5", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab5",
                "isActive"
              ])}
              pageRoute={`/contact-page`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zfPCf
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToContactPage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/contact-page` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToContactPage"] != null &&
                    typeof $steps["goToContactPage"] === "object" &&
                    typeof $steps["goToContactPage"].then === "function"
                  ) {
                    $steps["goToContactPage"] = await $steps["goToContactPage"];
                  }
                }}
              >
                {"Contact"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab4"}
              data-plasmic-override={overrides.tab4}
              className={classNames("__wab_instance", sty.tab4)}
              isActive={generateStateValueProp($state, ["tab4", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab4",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dErlM
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
              >
                {"Careers"}
              </div>
            </Tab2>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tbpgN)}>
            <Tab2
              data-plasmic-name={"tab18"}
              data-plasmic-override={overrides.tab18}
              className={classNames("__wab_instance", sty.tab18)}
              isActive={generateStateValueProp($state, ["tab18", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab18",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bIo1G
                )}
              >
                {"Resources"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab19"}
              data-plasmic-override={overrides.tab19}
              className={classNames("__wab_instance", sty.tab19)}
              isActive={generateStateValueProp($state, ["tab19", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab19",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sbbCs
                )}
              >
                {"Blogs"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab20"}
              data-plasmic-override={overrides.tab20}
              className={classNames("__wab_instance", sty.tab20)}
              isActive={generateStateValueProp($state, ["tab20", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab20",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zHiiL
                )}
              >
                {"Guide"}
              </div>
            </Tab2>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__sjT0J)}>
            <Tab2
              data-plasmic-name={"tab23"}
              data-plasmic-override={overrides.tab23}
              className={classNames("__wab_instance", sty.tab23)}
              isActive={generateStateValueProp($state, ["tab23", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab23",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lqVdj
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPricingPage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/pricing-page` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPricingPage"] != null &&
                    typeof $steps["goToPricingPage"] === "object" &&
                    typeof $steps["goToPricingPage"].then === "function"
                  ) {
                    $steps["goToPricingPage"] = await $steps["goToPricingPage"];
                  }
                }}
              >
                {"Pricing"}
              </div>
            </Tab2>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column___3KhVr)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__p1Guk)}>
            <Tab2
              data-plasmic-name={"tab35"}
              data-plasmic-override={overrides.tab35}
              className={classNames("__wab_instance", sty.tab35)}
              isActive={generateStateValueProp($state, ["tab35", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab35",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__m03PS
                )}
              >
                {"Services"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab36"}
              data-plasmic-override={overrides.tab36}
              className={classNames("__wab_instance", sty.tab36)}
              isActive={generateStateValueProp($state, ["tab36", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab36",
                "isActive"
              ])}
              pageRoute={`/custom-software`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oscJw
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToCustomSoftware"] = true
                    ? (() => {
                        const actionArgs = { destination: `/custom-software` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToCustomSoftware"] != null &&
                    typeof $steps["goToCustomSoftware"] === "object" &&
                    typeof $steps["goToCustomSoftware"].then === "function"
                  ) {
                    $steps["goToCustomSoftware"] = await $steps[
                      "goToCustomSoftware"
                    ];
                  }
                }}
              >
                {"Custom Software"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab37"}
              data-plasmic-override={overrides.tab37}
              className={classNames("__wab_instance", sty.tab37)}
              isActive={generateStateValueProp($state, ["tab37", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab37",
                "isActive"
              ])}
              pageRoute={`/mobile-app-development`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e4W2I
                )}
              >
                {"Mobile app Development"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab38"}
              data-plasmic-override={overrides.tab38}
              className={classNames("__wab_instance", sty.tab38)}
              isActive={generateStateValueProp($state, ["tab38", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab38",
                "isActive"
              ])}
              pageRoute={`/web-app-development`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kIzo0
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHireSoftwareDevelopers"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/hire-software-developers`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHireSoftwareDevelopers"] != null &&
                    typeof $steps["goToHireSoftwareDevelopers"] === "object" &&
                    typeof $steps["goToHireSoftwareDevelopers"].then ===
                      "function"
                  ) {
                    $steps["goToHireSoftwareDevelopers"] = await $steps[
                      "goToHireSoftwareDevelopers"
                    ];
                  }
                }}
              >
                {"Web app Development"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab39"}
              data-plasmic-override={overrides.tab39}
              className={classNames("__wab_instance", sty.tab39)}
              isActive={generateStateValueProp($state, ["tab39", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab39",
                "isActive"
              ])}
              pageRoute={`/hire-software-developers`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___31FxE
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHireSoftwareDevelopers"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/hire-software-developers`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHireSoftwareDevelopers"] != null &&
                    typeof $steps["goToHireSoftwareDevelopers"] === "object" &&
                    typeof $steps["goToHireSoftwareDevelopers"].then ===
                      "function"
                  ) {
                    $steps["goToHireSoftwareDevelopers"] = await $steps[
                      "goToHireSoftwareDevelopers"
                    ];
                  }
                }}
              >
                {"Hire Software Developers"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab40"}
              data-plasmic-override={overrides.tab40}
              className={classNames("__wab_instance", sty.tab40)}
              isActive={generateStateValueProp($state, ["tab40", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab40",
                "isActive"
              ])}
              pageRoute={`/ui-ux-design-services`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hfJv1
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHireSoftwareDevelopers"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/hire-software-developers`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHireSoftwareDevelopers"] != null &&
                    typeof $steps["goToHireSoftwareDevelopers"] === "object" &&
                    typeof $steps["goToHireSoftwareDevelopers"].then ===
                      "function"
                  ) {
                    $steps["goToHireSoftwareDevelopers"] = await $steps[
                      "goToHireSoftwareDevelopers"
                    ];
                  }
                }}
              >
                {"Software UI/UX Design"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab41"}
              data-plasmic-override={overrides.tab41}
              className={classNames("__wab_instance", sty.tab41)}
              isActive={generateStateValueProp($state, ["tab41", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab41",
                "isActive"
              ])}
              pageRoute={`/artificial-intelligence`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l4Tsx
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHireSoftwareDevelopers"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/hire-software-developers`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHireSoftwareDevelopers"] != null &&
                    typeof $steps["goToHireSoftwareDevelopers"] === "object" &&
                    typeof $steps["goToHireSoftwareDevelopers"].then ===
                      "function"
                  ) {
                    $steps["goToHireSoftwareDevelopers"] = await $steps[
                      "goToHireSoftwareDevelopers"
                    ];
                  }
                }}
              >
                {"Artificial Intelligence"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab42"}
              data-plasmic-override={overrides.tab42}
              className={classNames("__wab_instance", sty.tab42)}
              isActive={generateStateValueProp($state, ["tab42", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab42",
                "isActive"
              ])}
              pageRoute={`/software-qa-and-testing`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oqUas
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHireSoftwareDevelopers"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/hire-software-developers`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHireSoftwareDevelopers"] != null &&
                    typeof $steps["goToHireSoftwareDevelopers"] === "object" &&
                    typeof $steps["goToHireSoftwareDevelopers"].then ===
                      "function"
                  ) {
                    $steps["goToHireSoftwareDevelopers"] = await $steps[
                      "goToHireSoftwareDevelopers"
                    ];
                  }
                }}
              >
                {"Software QA and Testing"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab43"}
              data-plasmic-override={overrides.tab43}
              className={classNames("__wab_instance", sty.tab43)}
              isActive={generateStateValueProp($state, ["tab43", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab43",
                "isActive"
              ])}
              pageRoute={`/development-analytics-tool`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ojoWx
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHireSoftwareDevelopers"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/hire-software-developers`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHireSoftwareDevelopers"] != null &&
                    typeof $steps["goToHireSoftwareDevelopers"] === "object" &&
                    typeof $steps["goToHireSoftwareDevelopers"].then ===
                      "function"
                  ) {
                    $steps["goToHireSoftwareDevelopers"] = await $steps[
                      "goToHireSoftwareDevelopers"
                    ];
                  }
                }}
              >
                {"Development Analytics Tool"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab44"}
              data-plasmic-override={overrides.tab44}
              className={classNames("__wab_instance", sty.tab44)}
              isActive={generateStateValueProp($state, ["tab44", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab44",
                "isActive"
              ])}
              pageRoute={`/software-maintenance`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y9Oze
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHireSoftwareDevelopers"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/hire-software-developers`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHireSoftwareDevelopers"] != null &&
                    typeof $steps["goToHireSoftwareDevelopers"] === "object" &&
                    typeof $steps["goToHireSoftwareDevelopers"].then ===
                      "function"
                  ) {
                    $steps["goToHireSoftwareDevelopers"] = await $steps[
                      "goToHireSoftwareDevelopers"
                    ];
                  }
                }}
              >
                {"Software Maintainence"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab45"}
              data-plasmic-override={overrides.tab45}
              className={classNames("__wab_instance", sty.tab45)}
              isActive={generateStateValueProp($state, ["tab45", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab45",
                "isActive"
              ])}
              pageRoute={`/devops`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qz1It
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHireSoftwareDevelopers"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/hire-software-developers`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHireSoftwareDevelopers"] != null &&
                    typeof $steps["goToHireSoftwareDevelopers"] === "object" &&
                    typeof $steps["goToHireSoftwareDevelopers"].then ===
                      "function"
                  ) {
                    $steps["goToHireSoftwareDevelopers"] = await $steps[
                      "goToHireSoftwareDevelopers"
                    ];
                  }
                }}
              >
                {"DevOps"}
              </div>
            </Tab2>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__bvNIw)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__toL6B)}>
            <Tab2
              data-plasmic-name={"tab10"}
              data-plasmic-override={overrides.tab10}
              className={classNames("__wab_instance", sty.tab10)}
              isActive={generateStateValueProp($state, ["tab10", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab10",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dZiKe
                )}
              >
                {"Products"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab11"}
              data-plasmic-override={overrides.tab11}
              className={classNames("__wab_instance", sty.tab11)}
              isActive={generateStateValueProp($state, ["tab11", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab11",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tgKif
                )}
              >
                {"Labour Link"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab12"}
              data-plasmic-override={overrides.tab12}
              className={classNames("__wab_instance", sty.tab12)}
              isActive={generateStateValueProp($state, ["tab12", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab12",
                "isActive"
              ])}
              pageRoute={`/habuild-case-study`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__r3Yn
                )}
              >
                {"Habuild"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab13"}
              data-plasmic-override={overrides.tab13}
              className={classNames("__wab_instance", sty.tab13)}
              isActive={generateStateValueProp($state, ["tab13", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab13",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c9FXr
                )}
              >
                {"Satva"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab14"}
              data-plasmic-override={overrides.tab14}
              className={classNames("__wab_instance", sty.tab14)}
              isActive={generateStateValueProp($state, ["tab14", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab14",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ezkZe
                )}
              >
                {"Maroi Boerdery BK"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab15"}
              data-plasmic-override={overrides.tab15}
              className={classNames("__wab_instance", sty.tab15)}
              isActive={generateStateValueProp($state, ["tab15", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab15",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__daDDc
                )}
              >
                {"Innowell"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab16"}
              data-plasmic-override={overrides.tab16}
              className={classNames("__wab_instance", sty.tab16)}
              isActive={generateStateValueProp($state, ["tab16", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab16",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bXiG
                )}
              >
                {"DCM Shriram"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab17"}
              data-plasmic-override={overrides.tab17}
              className={classNames("__wab_instance", sty.tab17)}
              isActive={generateStateValueProp($state, ["tab17", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab17",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qAHfX
                )}
              >
                {"Star Bazaar"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab27"}
              data-plasmic-override={overrides.tab27}
              className={classNames("__wab_instance", sty.tab27)}
              isActive={generateStateValueProp($state, ["tab27", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab27",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iJux2
                )}
              >
                {"BharatPe"}
              </div>
            </Tab2>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___9PAdk)}>
            <Tab2
              data-plasmic-name={"tab22"}
              data-plasmic-override={overrides.tab22}
              className={classNames("__wab_instance", sty.tab22)}
              isActive={generateStateValueProp($state, ["tab22", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab22",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__a7YIc
                )}
              >
                {"Industry"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab24"}
              data-plasmic-override={overrides.tab24}
              className={classNames("__wab_instance", sty.tab24)}
              isActive={generateStateValueProp($state, ["tab24", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab24",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__waWoV
                )}
              >
                {"Agritech"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab25"}
              data-plasmic-override={overrides.tab25}
              className={classNames("__wab_instance", sty.tab25)}
              isActive={generateStateValueProp($state, ["tab25", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab25",
                "isActive"
              ])}
              pageRoute={`/ed-tech`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bbKRd
                )}
              >
                {"Edtech"}
              </div>
            </Tab2>
            <Tab2
              data-plasmic-name={"tab26"}
              data-plasmic-override={overrides.tab26}
              className={classNames("__wab_instance", sty.tab26)}
              isActive={generateStateValueProp($state, ["tab26", "isActive"])}
              onIsActiveChange2={generateStateOnChangeProp($state, [
                "tab26",
                "isActive"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c3CRv
                )}
              >
                {"Fintech"}
              </div>
            </Tab2>
          </div>
        </Stack__>
      </Stack__>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footer: [
    "footer",
    "columns",
    "tab2",
    "tab3",
    "tab21",
    "tab5",
    "tab4",
    "tab18",
    "tab19",
    "tab20",
    "tab23",
    "tab35",
    "tab36",
    "tab37",
    "tab38",
    "tab39",
    "tab40",
    "tab41",
    "tab42",
    "tab43",
    "tab44",
    "tab45",
    "tab10",
    "tab11",
    "tab12",
    "tab13",
    "tab14",
    "tab15",
    "tab16",
    "tab17",
    "tab27",
    "tab22",
    "tab24",
    "tab25",
    "tab26"
  ],
  columns: [
    "columns",
    "tab2",
    "tab3",
    "tab21",
    "tab5",
    "tab4",
    "tab18",
    "tab19",
    "tab20",
    "tab23",
    "tab35",
    "tab36",
    "tab37",
    "tab38",
    "tab39",
    "tab40",
    "tab41",
    "tab42",
    "tab43",
    "tab44",
    "tab45",
    "tab10",
    "tab11",
    "tab12",
    "tab13",
    "tab14",
    "tab15",
    "tab16",
    "tab17",
    "tab27",
    "tab22",
    "tab24",
    "tab25",
    "tab26"
  ],
  tab2: ["tab2"],
  tab3: ["tab3"],
  tab21: ["tab21"],
  tab5: ["tab5"],
  tab4: ["tab4"],
  tab18: ["tab18"],
  tab19: ["tab19"],
  tab20: ["tab20"],
  tab23: ["tab23"],
  tab35: ["tab35"],
  tab36: ["tab36"],
  tab37: ["tab37"],
  tab38: ["tab38"],
  tab39: ["tab39"],
  tab40: ["tab40"],
  tab41: ["tab41"],
  tab42: ["tab42"],
  tab43: ["tab43"],
  tab44: ["tab44"],
  tab45: ["tab45"],
  tab10: ["tab10"],
  tab11: ["tab11"],
  tab12: ["tab12"],
  tab13: ["tab13"],
  tab14: ["tab14"],
  tab15: ["tab15"],
  tab16: ["tab16"],
  tab17: ["tab17"],
  tab27: ["tab27"],
  tab22: ["tab22"],
  tab24: ["tab24"],
  tab25: ["tab25"],
  tab26: ["tab26"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footer: "section";
  columns: "div";
  tab2: typeof Tab2;
  tab3: typeof Tab2;
  tab21: typeof Tab2;
  tab5: typeof Tab2;
  tab4: typeof Tab2;
  tab18: typeof Tab2;
  tab19: typeof Tab2;
  tab20: typeof Tab2;
  tab23: typeof Tab2;
  tab35: typeof Tab2;
  tab36: typeof Tab2;
  tab37: typeof Tab2;
  tab38: typeof Tab2;
  tab39: typeof Tab2;
  tab40: typeof Tab2;
  tab41: typeof Tab2;
  tab42: typeof Tab2;
  tab43: typeof Tab2;
  tab44: typeof Tab2;
  tab45: typeof Tab2;
  tab10: typeof Tab2;
  tab11: typeof Tab2;
  tab12: typeof Tab2;
  tab13: typeof Tab2;
  tab14: typeof Tab2;
  tab15: typeof Tab2;
  tab16: typeof Tab2;
  tab17: typeof Tab2;
  tab27: typeof Tab2;
  tab22: typeof Tab2;
  tab24: typeof Tab2;
  tab25: typeof Tab2;
  tab26: typeof Tab2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavFooter__VariantsArgs;
    args?: PlasmicNavFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavFooter__ArgProps,
          internalVariantPropNames: PlasmicNavFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footer") {
    func.displayName = "PlasmicNavFooter";
  } else {
    func.displayName = `PlasmicNavFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicNavFooter = Object.assign(
  // Top-level PlasmicNavFooter renders the root element
  makeNodeComponent("footer"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    tab2: makeNodeComponent("tab2"),
    tab3: makeNodeComponent("tab3"),
    tab21: makeNodeComponent("tab21"),
    tab5: makeNodeComponent("tab5"),
    tab4: makeNodeComponent("tab4"),
    tab18: makeNodeComponent("tab18"),
    tab19: makeNodeComponent("tab19"),
    tab20: makeNodeComponent("tab20"),
    tab23: makeNodeComponent("tab23"),
    tab35: makeNodeComponent("tab35"),
    tab36: makeNodeComponent("tab36"),
    tab37: makeNodeComponent("tab37"),
    tab38: makeNodeComponent("tab38"),
    tab39: makeNodeComponent("tab39"),
    tab40: makeNodeComponent("tab40"),
    tab41: makeNodeComponent("tab41"),
    tab42: makeNodeComponent("tab42"),
    tab43: makeNodeComponent("tab43"),
    tab44: makeNodeComponent("tab44"),
    tab45: makeNodeComponent("tab45"),
    tab10: makeNodeComponent("tab10"),
    tab11: makeNodeComponent("tab11"),
    tab12: makeNodeComponent("tab12"),
    tab13: makeNodeComponent("tab13"),
    tab14: makeNodeComponent("tab14"),
    tab15: makeNodeComponent("tab15"),
    tab16: makeNodeComponent("tab16"),
    tab17: makeNodeComponent("tab17"),
    tab27: makeNodeComponent("tab27"),
    tab22: makeNodeComponent("tab22"),
    tab24: makeNodeComponent("tab24"),
    tab25: makeNodeComponent("tab25"),
    tab26: makeNodeComponent("tab26"),

    // Metadata about props expected for PlasmicNavFooter
    internalVariantProps: PlasmicNavFooter__VariantProps,
    internalArgProps: PlasmicNavFooter__ArgProps
  }
);

export default PlasmicNavFooter;
/* prettier-ignore-end */
