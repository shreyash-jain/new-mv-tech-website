// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: 5L-Km_M5zR3l

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import OurVision from "../../OurVision"; // plasmic-import: MUH5sO8fvVYY/component
import OffloadScale from "../../OffloadScale"; // plasmic-import: i1BzPBGQRGYV/component
import ComparisonSection from "../../ComparisonSection"; // plasmic-import: FaTv8gX5y4bP/component
import LongTermProfitability from "../../LongTermProfitability"; // plasmic-import: JWI-TXO-D7ss/component
import Button2 from "../../Button2"; // plasmic-import: iFFcBUnvZUl0/component
import NavFooter from "../../NavFooter"; // plasmic-import: s0a682-ToGsq/component
import NavHeader from "../../NavHeader"; // plasmic-import: pZ9Yrp1wEL8X/component

import { useScreenVariants as useScreenVariantsptc9VYm7Ur9B } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PTC9vYM7UR9b/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicWhyVidyayatan.module.css"; // plasmic-import: 5L-Km_M5zR3l/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tSFoGfIVWAwT/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: FoPRmBUdi-FM/icon

createPlasmicElementProxy;

export type PlasmicWhyVidyayatan__VariantMembers = {};
export type PlasmicWhyVidyayatan__VariantsArgs = {};
type VariantPropType = keyof PlasmicWhyVidyayatan__VariantsArgs;
export const PlasmicWhyVidyayatan__VariantProps = new Array<VariantPropType>();

export type PlasmicWhyVidyayatan__ArgsType = {};
type ArgPropType = keyof PlasmicWhyVidyayatan__ArgsType;
export const PlasmicWhyVidyayatan__ArgProps = new Array<ArgPropType>();

export type PlasmicWhyVidyayatan__OverridesType = {
  root?: Flex__<"div">;
  heroSection?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  whyVidyayatan?: Flex__<"section">;
  ourVision?: Flex__<typeof OurVision>;
  offloadScale?: Flex__<typeof OffloadScale>;
  comparisonSection?: Flex__<typeof ComparisonSection>;
  longTermProfitability?: Flex__<typeof LongTermProfitability>;
  convertSection?: Flex__<"section">;
  columns?: Flex__<"div">;
  navFooter?: Flex__<typeof NavFooter>;
  navHeader?: Flex__<typeof NavHeader>;
};

export interface DefaultWhyVidyayatanProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWhyVidyayatan__RenderFunc(props: {
  variants: PlasmicWhyVidyayatan__VariantsArgs;
  args: PlasmicWhyVidyayatan__ArgsType;
  overrides: PlasmicWhyVidyayatan__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsptc9VYm7Ur9B()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_vidyayatan_landing_page_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_apple_css.plasmic_tokens,
            plasmic_vercel_workflow_css.plasmic_tokens,
            plasmic_saa_s_website_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"heroSection"}
            data-plasmic-override={overrides.heroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.heroSection)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fEs08)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__e5U20)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cgEmS)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___3Ooc3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qJDh3
                      )}
                    >
                      {"Your Business, Simplified."}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__thi5
                      )}
                    >
                      {
                        "Vidyayatan Technologies empowers businesses with our comprehensive tech solutions, providing scalable, cost-efficient software development, skilled teams, and robust analytics."
                      }
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"800px"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/image33.png",
                fullWidth: 2070,
                fullHeight: 1380,
                aspectRatio: undefined
              }}
            />
          </Stack__>
          <section
            data-plasmic-name={"whyVidyayatan"}
            data-plasmic-override={overrides.whyVidyayatan}
            className={classNames(projectcss.all, sty.whyVidyayatan)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bXqmV
              )}
            >
              {"Why Vidyayatan?"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iBkC)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qbe5I
                )}
              >
                {
                  "We provide dependable, affordable, and scalable software development solutions."
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pIrRl
                )}
              >
                {
                  "Founded with a vision to innovate, Vidyayatan Technologies started as a small team with a big dream. Today, we\u2019ve grown into a dynamic tech company, known for delivering cutting-edge software solutions and transforming industries. With a dedicated team of experts, we specialize in crafting tailored technology solutions that drive business success, supporting clients across diverse sectors from our central hub in Bhopal and beyond."
                }
              </div>
            </Stack__>
          </section>
          <OurVision
            data-plasmic-name={"ourVision"}
            data-plasmic-override={overrides.ourVision}
            className={classNames("__wab_instance", sty.ourVision)}
          />

          <OffloadScale
            data-plasmic-name={"offloadScale"}
            data-plasmic-override={overrides.offloadScale}
            className={classNames("__wab_instance", sty.offloadScale)}
          />

          <ComparisonSection
            data-plasmic-name={"comparisonSection"}
            data-plasmic-override={overrides.comparisonSection}
            className={classNames("__wab_instance", sty.comparisonSection)}
          />

          <LongTermProfitability
            data-plasmic-name={"longTermProfitability"}
            data-plasmic-override={overrides.longTermProfitability}
            className={classNames("__wab_instance", sty.longTermProfitability)}
          />

          <section
            data-plasmic-name={"convertSection"}
            data-plasmic-override={overrides.convertSection}
            className={classNames(projectcss.all, sty.convertSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ifp2X)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jfasV
                )}
              >
                {
                  "Ready for growth with high-quality, budget-friendly tech solutions?"
                }
              </div>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column___43TT)}>
                <Button2
                  className={classNames("__wab_instance", sty.button2__jXkd9)}
                  color={"white"}
                  link={`/pricing-page`}
                  shape={"rounded"}
                >
                  {"View Pricing"}
                </Button2>
              </div>
              <div className={classNames(projectcss.all, sty.column__qmJf9)}>
                <Button2
                  className={classNames("__wab_instance", sty.button2__wlwV7)}
                  color={undefined}
                  link={"https://calendar.app.google/7GAyDKQLPvjA5rca6"}
                  shape={"rounded"}
                  showEndIcon={true}
                >
                  {"Book Meeting"}
                </Button2>
              </div>
            </Stack__>
          </section>
          <NavFooter
            data-plasmic-name={"navFooter"}
            data-plasmic-override={overrides.navFooter}
            className={classNames("__wab_instance", sty.navFooter)}
          />

          <NavHeader
            data-plasmic-name={"navHeader"}
            data-plasmic-override={overrides.navHeader}
            className={classNames("__wab_instance", sty.navHeader)}
            scrolledVariant={(() => {
              try {
                return $ctx.isScrolled;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "heroSection",
    "img",
    "whyVidyayatan",
    "ourVision",
    "offloadScale",
    "comparisonSection",
    "longTermProfitability",
    "convertSection",
    "columns",
    "navFooter",
    "navHeader"
  ],
  heroSection: ["heroSection", "img"],
  img: ["img"],
  whyVidyayatan: ["whyVidyayatan"],
  ourVision: ["ourVision"],
  offloadScale: ["offloadScale"],
  comparisonSection: ["comparisonSection"],
  longTermProfitability: ["longTermProfitability"],
  convertSection: ["convertSection", "columns"],
  columns: ["columns"],
  navFooter: ["navFooter"],
  navHeader: ["navHeader"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  heroSection: "div";
  img: typeof PlasmicImg__;
  whyVidyayatan: "section";
  ourVision: typeof OurVision;
  offloadScale: typeof OffloadScale;
  comparisonSection: typeof ComparisonSection;
  longTermProfitability: typeof LongTermProfitability;
  convertSection: "section";
  columns: "div";
  navFooter: typeof NavFooter;
  navHeader: typeof NavHeader;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWhyVidyayatan__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWhyVidyayatan__VariantsArgs;
    args?: PlasmicWhyVidyayatan__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWhyVidyayatan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWhyVidyayatan__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWhyVidyayatan__ArgProps,
          internalVariantPropNames: PlasmicWhyVidyayatan__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWhyVidyayatan__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWhyVidyayatan";
  } else {
    func.displayName = `PlasmicWhyVidyayatan.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "qg9BUJrNtisePZMs8FM4BQ"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicWhyVidyayatan = Object.assign(
  // Top-level PlasmicWhyVidyayatan renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    heroSection: makeNodeComponent("heroSection"),
    img: makeNodeComponent("img"),
    whyVidyayatan: makeNodeComponent("whyVidyayatan"),
    ourVision: makeNodeComponent("ourVision"),
    offloadScale: makeNodeComponent("offloadScale"),
    comparisonSection: makeNodeComponent("comparisonSection"),
    longTermProfitability: makeNodeComponent("longTermProfitability"),
    convertSection: makeNodeComponent("convertSection"),
    columns: makeNodeComponent("columns"),
    navFooter: makeNodeComponent("navFooter"),
    navHeader: makeNodeComponent("navHeader"),

    // Metadata about props expected for PlasmicWhyVidyayatan
    internalVariantProps: PlasmicWhyVidyayatan__VariantProps,
    internalArgProps: PlasmicWhyVidyayatan__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicWhyVidyayatan;
/* prettier-ignore-end */
