// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: OSxmnRwgarAs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: iFFcBUnvZUl0/component
import CaseStudyCard from "../../CaseStudyCard"; // plasmic-import: IzU1KfsmeHnj/component

import { useScreenVariants as useScreenVariantsptc9VYm7Ur9B } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PTC9vYM7UR9b/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicProductOverview.module.css"; // plasmic-import: OSxmnRwgarAs/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tSFoGfIVWAwT/icon
import Frame18Icon from "./icons/PlasmicIcon__Frame18"; // plasmic-import: n4n-qgslZ89z/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: FoPRmBUdi-FM/icon

createPlasmicElementProxy;

export type PlasmicProductOverview__VariantMembers = {};
export type PlasmicProductOverview__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductOverview__VariantsArgs;
export const PlasmicProductOverview__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProductOverview__ArgsType = {};
type ArgPropType = keyof PlasmicProductOverview__ArgsType;
export const PlasmicProductOverview__ArgProps = new Array<ArgPropType>();

export type PlasmicProductOverview__OverridesType = {
  productOverview?: Flex__<"section">;
  redFreeBox?: Flex__<"div">;
  redFreeBox2?: Flex__<"div">;
  redFreeBox3?: Flex__<"div">;
  redFreeBox4?: Flex__<"div">;
  redFreeBox5?: Flex__<"div">;
  redFreeBox6?: Flex__<"div">;
  redFreeBox7?: Flex__<"div">;
  blueFreeBox?: Flex__<"div">;
  blueFreeBox2?: Flex__<"div">;
  blueFreeBox3?: Flex__<"div">;
  blueFreeBox4?: Flex__<"div">;
  blueFreeBox5?: Flex__<"div">;
  blueFreeBox6?: Flex__<"div">;
  blueFreeBox7?: Flex__<"div">;
  svg?: Flex__<"svg">;
  caseStudies?: Flex__<"div">;
};

export interface DefaultProductOverviewProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductOverview__RenderFunc(props: {
  variants: PlasmicProductOverview__VariantsArgs;
  args: PlasmicProductOverview__ArgsType;
  overrides: PlasmicProductOverview__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsptc9VYm7Ur9B()
  });

  return (
    <section
      data-plasmic-name={"productOverview"}
      data-plasmic-override={overrides.productOverview}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_vidyayatan_landing_page_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.productOverview
      )}
    >
      <div
        data-plasmic-name={"redFreeBox"}
        data-plasmic-override={overrides.redFreeBox}
        className={classNames(projectcss.all, sty.redFreeBox)}
      />

      <div
        data-plasmic-name={"redFreeBox2"}
        data-plasmic-override={overrides.redFreeBox2}
        className={classNames(projectcss.all, sty.redFreeBox2)}
      />

      <div
        data-plasmic-name={"redFreeBox3"}
        data-plasmic-override={overrides.redFreeBox3}
        className={classNames(projectcss.all, sty.redFreeBox3)}
      />

      <div
        data-plasmic-name={"redFreeBox4"}
        data-plasmic-override={overrides.redFreeBox4}
        className={classNames(projectcss.all, sty.redFreeBox4)}
      />

      <div
        data-plasmic-name={"redFreeBox5"}
        data-plasmic-override={overrides.redFreeBox5}
        className={classNames(projectcss.all, sty.redFreeBox5)}
      />

      <div
        data-plasmic-name={"redFreeBox6"}
        data-plasmic-override={overrides.redFreeBox6}
        className={classNames(projectcss.all, sty.redFreeBox6)}
      />

      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <div
          data-plasmic-name={"redFreeBox7"}
          data-plasmic-override={overrides.redFreeBox7}
          className={classNames(projectcss.all, sty.redFreeBox7)}
        />
      ) : null}
      <div
        data-plasmic-name={"blueFreeBox"}
        data-plasmic-override={overrides.blueFreeBox}
        className={classNames(projectcss.all, sty.blueFreeBox)}
      />

      <div
        data-plasmic-name={"blueFreeBox2"}
        data-plasmic-override={overrides.blueFreeBox2}
        className={classNames(projectcss.all, sty.blueFreeBox2)}
      />

      <div
        data-plasmic-name={"blueFreeBox3"}
        data-plasmic-override={overrides.blueFreeBox3}
        className={classNames(projectcss.all, sty.blueFreeBox3)}
      />

      <div
        data-plasmic-name={"blueFreeBox4"}
        data-plasmic-override={overrides.blueFreeBox4}
        className={classNames(projectcss.all, sty.blueFreeBox4)}
      />

      <div
        data-plasmic-name={"blueFreeBox5"}
        data-plasmic-override={overrides.blueFreeBox5}
        className={classNames(projectcss.all, sty.blueFreeBox5)}
      />

      <div
        data-plasmic-name={"blueFreeBox6"}
        data-plasmic-override={overrides.blueFreeBox6}
        className={classNames(projectcss.all, sty.blueFreeBox6)}
      />

      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <div
          data-plasmic-name={"blueFreeBox7"}
          data-plasmic-override={overrides.blueFreeBox7}
          className={classNames(projectcss.all, sty.blueFreeBox7)}
        />
      ) : null}
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xcqNd)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ibWJq
          )}
        >
          {"A Glimpse into \nOur Solutions"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gtV7Z
          )}
        >
          {
            "Explore our range of innovative products, designed to tackle industry challenges and boost efficiency. Our cutting-edge solutions transform operations and drive success for your business."
          }
        </div>
        <Button2
          className={classNames("__wab_instance", sty.button2__mgoO)}
          endIcon={
            <Frame18Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          }
          link={
            "https://drive.google.com/file/d/1jvDTbjF7g3u_8CjE8_HPbsOEszRcCSMD/view?usp=sharing"
          }
          shape={"rounded"}
          showEndIcon={true}
          target={true}
        >
          {"Watch Demo"}
        </Button2>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"caseStudies"}
        data-plasmic-override={overrides.caseStudies}
        hasGap={true}
        className={classNames(projectcss.all, sty.caseStudies)}
      >
        <CaseStudyCard
          className={classNames("__wab_instance", sty.caseStudyCard__h9Vf)}
          screen={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "mobile"
              : undefined
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kr9M9)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__hr3My)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "32px"
                  : "48px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/labourLinkLogo2Png.png",
                fullWidth: 300,
                fullHeight: 300,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z1TMe
              )}
            >
              {"Labour Link"}
            </div>
            <Button2
              className={classNames("__wab_instance", sty.button2__jzRe9)}
              shape={"rounded"}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "compact"
                  : undefined
              }
            >
              {"Explore"}
            </Button2>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fU3Y9
            )}
          >
            {
              "MV Technologies' Labor Link system simplifies managing farm laborers, HR, security, and finance. It offers legal support for compliance and efficiency, automating processes to boost productivity and ensure smooth operations."
            }
          </div>
        </CaseStudyCard>
        <CaseStudyCard
          className={classNames("__wab_instance", sty.caseStudyCard__tdfet)}
          screen={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "mobile"
              : undefined
          }
          slot={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__lu0JS)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/habuildScreenPng.png",
                fullWidth: 4864,
                fullHeight: 3120,
                aspectRatio: undefined
              }}
            />
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__v1WdM)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__j24Ul)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "32px"
                  : "48px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/habuildLogoPng2.png",
                fullWidth: 721,
                fullHeight: 649,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u7VUo
              )}
            >
              {"Habuild"}
            </div>
            <Button2
              className={classNames("__wab_instance", sty.button2__pxFd4)}
              link={`/habuild-case-study`}
              shape={"rounded"}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "compact"
                  : undefined
              }
            >
              {"Explore"}
            </Button2>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qjgvY
            )}
          >
            {
              "MV Technologies's software solutions and tech expertise drove HABUILD's rapid growth by streamlining operations through automation, custom development, team building, and infrastructure setup."
            }
          </div>
        </CaseStudyCard>
        <CaseStudyCard
          className={classNames("__wab_instance", sty.caseStudyCard___2OuNh)}
          screen={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "mobile"
              : undefined
          }
          slot={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__luQh3)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/purchaseOrderTimlineViewInputPng.png",
                fullWidth: 6048,
                fullHeight: 3928,
                aspectRatio: undefined
              }}
            />
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__x0Z2E)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___3Br7V)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "32px"
                  : "48px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/satvaLogoPng.png",
                fullWidth: 320,
                fullHeight: 320,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fNu9R
              )}
            >
              {"Satvaa"}
            </div>
            <Button2
              className={classNames("__wab_instance", sty.button2__tAisQ)}
              shape={"rounded"}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "compact"
                  : undefined
              }
            >
              {"Explore"}
            </Button2>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ydMqb
            )}
          >
            {
              "Satvaa is a powerful ERP tool for food processing companies and farm owners, streamlining purchase orders, inventory, vendors, teams, traceability, and shipments in one intuitive app. Simplify operations and take control with Satvaa."
            }
          </div>
        </CaseStudyCard>
        <CaseStudyCard
          className={classNames("__wab_instance", sty.caseStudyCard__aMqhP)}
          screen={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "mobile"
              : undefined
          }
          slot={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__di3OX)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/farmMapPng2.png",
                fullWidth: 6048,
                fullHeight: 3928,
                aspectRatio: undefined
              }}
            />
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__a4Lp)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__e7Gvy)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "32px"
                  : "48px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/maroiBoerderyBkLogoPng.png",
                fullWidth: 880,
                fullHeight: 880,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cLosD
              )}
            >
              {"Maroi Boerdery BK"}
            </div>
            <Button2
              className={classNames("__wab_instance", sty.button2__vSzr)}
              shape={"rounded"}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "compact"
                  : undefined
              }
            >
              {"Explore"}
            </Button2>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ggh1F
            )}
          >
            {
              "MV Technology built a webapp for South Africa's Maroi Boerdery BK to manage farm blocks, plan seasons, track inputs, and create monthly pest calendars, streamlining their operations."
            }
          </div>
        </CaseStudyCard>
        <CaseStudyCard
          className={classNames("__wab_instance", sty.caseStudyCard___0O0Iq)}
          screen={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "mobile"
              : undefined
          }
          slot={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__z6ZV)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/maroiBoerderyBkEnergyMeterStatisticsPng.png",
                fullWidth: 6048,
                fullHeight: 3928,
                aspectRatio: undefined
              }}
            />
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qEwxy)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__dAoY)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "32px"
                  : "48px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/innowellLogoPng2.png",
                fullWidth: 340,
                fullHeight: 324,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eRcGz
              )}
            >
              {"Innowell"}
            </div>
            <Button2
              className={classNames("__wab_instance", sty.button2__j77H5)}
              shape={"rounded"}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "compact"
                  : undefined
              }
            >
              {"Explore"}
            </Button2>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___235Q
            )}
          >
            {
              "MV Technologies designed a SaaS mapping tool for Innowell, enabling them to map sites, buildings, floors, zones, and spaces, while tracking detailed statistics for each workstation."
            }
          </div>
        </CaseStudyCard>
        <CaseStudyCard
          className={classNames("__wab_instance", sty.caseStudyCard__pcmGm)}
          screen={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "mobile"
              : undefined
          }
          slot={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__cmHnu)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/dcmShriramScreensPng2.png",
                fullWidth: 6048,
                fullHeight: 3928,
                aspectRatio: undefined
              }}
            />
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xwDzn)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___2OmxJ)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "32px"
                  : "48px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/dcmShriramLogoPng.png",
                fullWidth: 192,
                fullHeight: 192,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pFRkR
              )}
            >
              {"DCM Shirram"}
            </div>
            <Button2
              className={classNames("__wab_instance", sty.button2__z7E3)}
              shape={"rounded"}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "compact"
                  : undefined
              }
            >
              {"Explore"}
            </Button2>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ynG
            )}
          >
            {
              "MV Technologies developed a digital tool for DCM Shriram, managing 300,000 farms and 1,600 managers with real-time crop monitoring, task management, and better coordination, boosting efficiency."
            }
          </div>
        </CaseStudyCard>
        <CaseStudyCard
          className={classNames("__wab_instance", sty.caseStudyCard___84KD)}
          screen={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "mobile"
              : undefined
          }
          slot={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__jhXOx)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/starBazaarCentralAdminDashboardPng.png",
                fullWidth: 6048,
                fullHeight: 3928,
                aspectRatio: undefined
              }}
            />
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__aTbjY)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___5Iecj)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "32px"
                  : "48px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/starBazaarLogo1Png.png",
                fullWidth: 80,
                fullHeight: 80,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bpI5E
              )}
            >
              {"Star Bazaar"}
            </div>
            <Button2
              className={classNames("__wab_instance", sty.button2__xh3WD)}
              shape={"rounded"}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "compact"
                  : undefined
              }
            >
              {"Explore"}
            </Button2>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__to6B
            )}
          >
            {
              "MV Technologies created a procurement system for Star Bazaar, optimizing farmer and aggregator interactions, market rates, vendor management, and yield predictions for improved efficiency and relationships."
            }
          </div>
        </CaseStudyCard>
        <CaseStudyCard
          className={classNames("__wab_instance", sty.caseStudyCard__lS6Kk)}
          screen={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "mobile"
              : undefined
          }
          slot={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___5FMxl)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/image54.png",
                fullWidth: 512,
                fullHeight: 512,
                aspectRatio: undefined
              }}
            />
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__z2OHp)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__z9Ik5)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "32px"
                  : "48px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/image53.png",
                fullWidth: 223,
                fullHeight: 226,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5MfZf
              )}
            >
              {"BharatPe"}
            </div>
            <Button2
              className={classNames("__wab_instance", sty.button2___2P8W9)}
              shape={"rounded"}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "compact"
                  : undefined
              }
            >
              {"Explore"}
            </Button2>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__y5778
            )}
          >
            {
              "MV Technologies developed a robust payment processing system for BharatPe, streamlining transactions, enhancing merchant management, and improving scalability with a microservices architecture, leading to faster payments and improved financial operations"
            }
          </div>
        </CaseStudyCard>
      </Stack__>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  productOverview: [
    "productOverview",
    "redFreeBox",
    "redFreeBox2",
    "redFreeBox3",
    "redFreeBox4",
    "redFreeBox5",
    "redFreeBox6",
    "redFreeBox7",
    "blueFreeBox",
    "blueFreeBox2",
    "blueFreeBox3",
    "blueFreeBox4",
    "blueFreeBox5",
    "blueFreeBox6",
    "blueFreeBox7",
    "svg",
    "caseStudies"
  ],
  redFreeBox: ["redFreeBox"],
  redFreeBox2: ["redFreeBox2"],
  redFreeBox3: ["redFreeBox3"],
  redFreeBox4: ["redFreeBox4"],
  redFreeBox5: ["redFreeBox5"],
  redFreeBox6: ["redFreeBox6"],
  redFreeBox7: ["redFreeBox7"],
  blueFreeBox: ["blueFreeBox"],
  blueFreeBox2: ["blueFreeBox2"],
  blueFreeBox3: ["blueFreeBox3"],
  blueFreeBox4: ["blueFreeBox4"],
  blueFreeBox5: ["blueFreeBox5"],
  blueFreeBox6: ["blueFreeBox6"],
  blueFreeBox7: ["blueFreeBox7"],
  svg: ["svg"],
  caseStudies: ["caseStudies"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  productOverview: "section";
  redFreeBox: "div";
  redFreeBox2: "div";
  redFreeBox3: "div";
  redFreeBox4: "div";
  redFreeBox5: "div";
  redFreeBox6: "div";
  redFreeBox7: "div";
  blueFreeBox: "div";
  blueFreeBox2: "div";
  blueFreeBox3: "div";
  blueFreeBox4: "div";
  blueFreeBox5: "div";
  blueFreeBox6: "div";
  blueFreeBox7: "div";
  svg: "svg";
  caseStudies: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductOverview__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductOverview__VariantsArgs;
    args?: PlasmicProductOverview__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductOverview__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductOverview__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductOverview__ArgProps,
          internalVariantPropNames: PlasmicProductOverview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductOverview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "productOverview") {
    func.displayName = "PlasmicProductOverview";
  } else {
    func.displayName = `PlasmicProductOverview.${nodeName}`;
  }
  return func;
}

export const PlasmicProductOverview = Object.assign(
  // Top-level PlasmicProductOverview renders the root element
  makeNodeComponent("productOverview"),
  {
    // Helper components rendering sub-elements
    redFreeBox: makeNodeComponent("redFreeBox"),
    redFreeBox2: makeNodeComponent("redFreeBox2"),
    redFreeBox3: makeNodeComponent("redFreeBox3"),
    redFreeBox4: makeNodeComponent("redFreeBox4"),
    redFreeBox5: makeNodeComponent("redFreeBox5"),
    redFreeBox6: makeNodeComponent("redFreeBox6"),
    redFreeBox7: makeNodeComponent("redFreeBox7"),
    blueFreeBox: makeNodeComponent("blueFreeBox"),
    blueFreeBox2: makeNodeComponent("blueFreeBox2"),
    blueFreeBox3: makeNodeComponent("blueFreeBox3"),
    blueFreeBox4: makeNodeComponent("blueFreeBox4"),
    blueFreeBox5: makeNodeComponent("blueFreeBox5"),
    blueFreeBox6: makeNodeComponent("blueFreeBox6"),
    blueFreeBox7: makeNodeComponent("blueFreeBox7"),
    svg: makeNodeComponent("svg"),
    caseStudies: makeNodeComponent("caseStudies"),

    // Metadata about props expected for PlasmicProductOverview
    internalVariantProps: PlasmicProductOverview__VariantProps,
    internalArgProps: PlasmicProductOverview__ArgProps
  }
);

export default PlasmicProductOverview;
/* prettier-ignore-end */
