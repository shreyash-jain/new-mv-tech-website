// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: i1BzPBGQRGYV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsptc9VYm7Ur9B } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PTC9vYM7UR9b/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicOffloadScale.module.css"; // plasmic-import: i1BzPBGQRGYV/css

import Frame4Icon from "./icons/PlasmicIcon__Frame4"; // plasmic-import: b358zWMLqIyf/icon
import Frame6Icon from "./icons/PlasmicIcon__Frame6"; // plasmic-import: vswdgIK_OGKH/icon
import Frame5Icon from "./icons/PlasmicIcon__Frame5"; // plasmic-import: jElqlrDEH9Gg/icon
import Frame7Icon from "./icons/PlasmicIcon__Frame7"; // plasmic-import: JxNsv4LYJBNA/icon

createPlasmicElementProxy;

export type PlasmicOffloadScale__VariantMembers = {};
export type PlasmicOffloadScale__VariantsArgs = {};
type VariantPropType = keyof PlasmicOffloadScale__VariantsArgs;
export const PlasmicOffloadScale__VariantProps = new Array<VariantPropType>();

export type PlasmicOffloadScale__ArgsType = {};
type ArgPropType = keyof PlasmicOffloadScale__ArgsType;
export const PlasmicOffloadScale__ArgProps = new Array<ArgPropType>();

export type PlasmicOffloadScale__OverridesType = {
  offloadScaleMaintainControlSecure?: Flex__<"section">;
  services2?: Flex__<"div">;
  offload2?: Flex__<"div">;
  offload?: Flex__<"div">;
  scale?: Flex__<"div">;
  scale2?: Flex__<"div">;
  control?: Flex__<"div">;
  control2?: Flex__<"div">;
  secure?: Flex__<"div">;
  secure2?: Flex__<"div">;
};

export interface DefaultOffloadScaleProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOffloadScale__RenderFunc(props: {
  variants: PlasmicOffloadScale__VariantsArgs;
  args: PlasmicOffloadScale__ArgsType;
  overrides: PlasmicOffloadScale__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsptc9VYm7Ur9B()
  });

  return (
    <section
      data-plasmic-name={"offloadScaleMaintainControlSecure"}
      data-plasmic-override={overrides.offloadScaleMaintainControlSecure}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_vidyayatan_landing_page_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.offloadScaleMaintainControlSecure
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___4OZfz
        )}
      >
        {"How we help you?"}
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"services2"}
        data-plasmic-override={overrides.services2}
        hasGap={true}
        className={classNames(projectcss.all, sty.services2)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"offload2"}
          data-plasmic-override={overrides.offload2}
          hasGap={true}
          className={classNames(projectcss.all, sty.offload2)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__htgQq)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"offload"}
              data-plasmic-override={overrides.offload}
              hasGap={true}
              className={classNames(projectcss.all, sty.offload)}
            >
              <Frame4Icon
                className={classNames(projectcss.all, sty.svg__urnsj)}
                role={"img"}
              />
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__a4Lu5
              )}
            >
              {"Offload"}
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kFiKr
            )}
          >
            {"Our team manages the entire software lifecycle."}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"scale"}
          data-plasmic-override={overrides.scale}
          hasGap={true}
          className={classNames(projectcss.all, sty.scale)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fAkQa)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"scale2"}
              data-plasmic-override={overrides.scale2}
              hasGap={true}
              className={classNames(projectcss.all, sty.scale2)}
            >
              <Frame6Icon
                className={classNames(projectcss.all, sty.svg__jdk1Z)}
                role={"img"}
              />
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__v3Frx
              )}
            >
              {"Scale"}
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1ANxI
            )}
          >
            {"Our software scales effortlessly to handle all your features."}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"control"}
          data-plasmic-override={overrides.control}
          hasGap={true}
          className={classNames(projectcss.all, sty.control)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sku4P)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"control2"}
              data-plasmic-override={overrides.control2}
              hasGap={true}
              className={classNames(projectcss.all, sty.control2)}
            >
              <Frame5Icon
                className={classNames(projectcss.all, sty.svg__y7P7I)}
                role={"img"}
              />
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oz2W0
              )}
            >
              {"Control"}
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fl3S
            )}
          >
            {"Our team ensures quality and handles maintenance."}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"secure"}
          data-plasmic-override={overrides.secure}
          hasGap={true}
          className={classNames(projectcss.all, sty.secure)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qHs0Q)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"secure2"}
              data-plasmic-override={overrides.secure2}
              hasGap={true}
              className={classNames(projectcss.all, sty.secure2)}
            >
              <Frame7Icon
                className={classNames(projectcss.all, sty.svg___4H54)}
                role={"img"}
              />
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lyCht
              )}
            >
              {"Secure"}
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fs69
            )}
          >
            {"Our applications are safeguarded against external threats."}
          </div>
        </Stack__>
      </Stack__>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  offloadScaleMaintainControlSecure: [
    "offloadScaleMaintainControlSecure",
    "services2",
    "offload2",
    "offload",
    "scale",
    "scale2",
    "control",
    "control2",
    "secure",
    "secure2"
  ],
  services2: [
    "services2",
    "offload2",
    "offload",
    "scale",
    "scale2",
    "control",
    "control2",
    "secure",
    "secure2"
  ],
  offload2: ["offload2", "offload"],
  offload: ["offload"],
  scale: ["scale", "scale2"],
  scale2: ["scale2"],
  control: ["control", "control2"],
  control2: ["control2"],
  secure: ["secure", "secure2"],
  secure2: ["secure2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  offloadScaleMaintainControlSecure: "section";
  services2: "div";
  offload2: "div";
  offload: "div";
  scale: "div";
  scale2: "div";
  control: "div";
  control2: "div";
  secure: "div";
  secure2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOffloadScale__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOffloadScale__VariantsArgs;
    args?: PlasmicOffloadScale__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOffloadScale__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicOffloadScale__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOffloadScale__ArgProps,
          internalVariantPropNames: PlasmicOffloadScale__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOffloadScale__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "offloadScaleMaintainControlSecure") {
    func.displayName = "PlasmicOffloadScale";
  } else {
    func.displayName = `PlasmicOffloadScale.${nodeName}`;
  }
  return func;
}

export const PlasmicOffloadScale = Object.assign(
  // Top-level PlasmicOffloadScale renders the root element
  makeNodeComponent("offloadScaleMaintainControlSecure"),
  {
    // Helper components rendering sub-elements
    services2: makeNodeComponent("services2"),
    offload2: makeNodeComponent("offload2"),
    offload: makeNodeComponent("offload"),
    scale: makeNodeComponent("scale"),
    scale2: makeNodeComponent("scale2"),
    control: makeNodeComponent("control"),
    control2: makeNodeComponent("control2"),
    secure: makeNodeComponent("secure"),
    secure2: makeNodeComponent("secure2"),

    // Metadata about props expected for PlasmicOffloadScale
    internalVariantProps: PlasmicOffloadScale__VariantProps,
    internalArgProps: PlasmicOffloadScale__ArgProps
  }
);

export default PlasmicOffloadScale;
/* prettier-ignore-end */
