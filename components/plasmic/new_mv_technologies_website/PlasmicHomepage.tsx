// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: e83ML_QjkvHU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Button2 from "../../Button2"; // plasmic-import: iFFcBUnvZUl0/component
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax";
import Tilt from "@plasmicpkgs/react-parallax-tilt";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Tab from "../../Tab"; // plasmic-import: jf_z6wjG7bBo/component
import OurVision from "../../OurVision"; // plasmic-import: MUH5sO8fvVYY/component
import OffloadScale from "../../OffloadScale"; // plasmic-import: i1BzPBGQRGYV/component
import ComparisonSection from "../../ComparisonSection"; // plasmic-import: FaTv8gX5y4bP/component
import LongTermProfitability from "../../LongTermProfitability"; // plasmic-import: JWI-TXO-D7ss/component
import WeExcelInSection from "../../WeExcelInSection"; // plasmic-import: GOGTEeayq0FO/component
import ProductOverview from "../../ProductOverview"; // plasmic-import: OSxmnRwgarAs/component
import CompanyTab from "../../CompanyTab"; // plasmic-import: tJAIrxUZQNcn/component
import Testimonials from "../../Testimonials"; // plasmic-import: q8KVAm97HyX-/component
import FaqSection from "../../FaqSection"; // plasmic-import: BSnSueyvgk6P/component
import ConnectWithUs from "../../ConnectWithUs"; // plasmic-import: w9fJfCJ45KHV/component
import NavFooter from "../../NavFooter"; // plasmic-import: s0a682-ToGsq/component
import NavHeader from "../../NavHeader"; // plasmic-import: pZ9Yrp1wEL8X/component

import { useScreenVariants as useScreenVariantsptc9VYm7Ur9B } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PTC9vYM7UR9b/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: e83ML_QjkvHU/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tSFoGfIVWAwT/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: FoPRmBUdi-FM/icon
import Frame9Icon from "./icons/PlasmicIcon__Frame9"; // plasmic-import: BeC73lXIzA9b/icon
import Frame10Icon from "./icons/PlasmicIcon__Frame10"; // plasmic-import: ByXkQHEplxsY/icon
import Frame11Icon from "./icons/PlasmicIcon__Frame11"; // plasmic-import: sU8Ti1nGsma1/icon
import Frame20Icon from "./icons/PlasmicIcon__Frame20"; // plasmic-import: 6tYQqlLmStc2/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {
  companyTabOptions: "companyTabOptions";
};
export type PlasmicHomepage__VariantsArgs = {
  companyTabOptions?: SingleBooleanChoiceArg<"companyTabOptions">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "companyTabOptions"
);

export type PlasmicHomepage__ArgsType = {
  onClick?: () => void;
  onCompanyClick?: () => void;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "onClick",
  "onCompanyClick"
);

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  heroSection?: Flex__<"div">;
  span?: Flex__<"span">;
  button2?: Flex__<typeof Button2>;
  scrollParallax?: Flex__<typeof ParallaxWrapper>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  ourServicesSection?: Flex__<"section">;
  ourServices?: Flex__<"div">;
  outsourcingSoftware2?: Flex__<"div">;
  text8?: Flex__<"div">;
  outsourcing?: Flex__<"div">;
  tab2?: Flex__<typeof Tab>;
  laborLinkVisual2?: Flex__<"div">;
  technologicalPartnership?: Flex__<"div">;
  text11?: Flex__<"div">;
  technologicalPartnership3?: Flex__<"div">;
  tab5?: Flex__<typeof Tab>;
  ilustations?: Flex__<"div">;
  technologicalPartnerships?: Flex__<"div">;
  laborLinkVisual3?: Flex__<"div">;
  text9?: Flex__<"div">;
  technologicalPartnership2?: Flex__<"div">;
  tab3?: Flex__<typeof Tab>;
  outsourcingSoftware3?: Flex__<"div">;
  text10?: Flex__<"div">;
  dedicatedTeams2?: Flex__<"div">;
  tab4?: Flex__<typeof Tab>;
  laborLinkVisual4?: Flex__<"div">;
  ourVision?: Flex__<typeof OurVision>;
  offloadScale?: Flex__<typeof OffloadScale>;
  comparisonSection?: Flex__<typeof ComparisonSection>;
  longTermProfitability?: Flex__<typeof LongTermProfitability>;
  weExcelInSection?: Flex__<typeof WeExcelInSection>;
  productOverview?: Flex__<typeof ProductOverview>;
  companyTab?: Flex__<typeof CompanyTab>;
  testimonials?: Flex__<typeof Testimonials>;
  faqSection?: Flex__<typeof FaqSection>;
  connectWithUs?: Flex__<typeof ConnectWithUs>;
  navFooter?: Flex__<typeof NavFooter>;
  navHeader?: Flex__<typeof NavHeader>;
  navHeader2?: Flex__<typeof NavHeader>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 5,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "companyTabOptions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.companyTabOptions
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsptc9VYm7Ur9B()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_vidyayatan_landing_page_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          plasmic_apple_css.plasmic_tokens,
          plasmic_vercel_workflow_css.plasmic_tokens,
          plasmic_saa_s_website_css.plasmic_tokens,
          sty.root,
          {
            [sty.rootcompanyTabOptions]: hasVariant(
              $state,
              "companyTabOptions",
              "companyTabOptions"
            )
          }
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__amE0J)}>
          <div
            data-plasmic-name={"heroSection"}
            data-plasmic-override={overrides.heroSection}
            className={classNames(projectcss.all, sty.heroSection, {
              [sty.heroSectioncompanyTabOptions]: hasVariant(
                $state,
                "companyTabOptions",
                "companyTabOptions"
              )
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ke0AG)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3Dc)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aWlek)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___9Ivkr)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"493px"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCompanyTabOptions"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "companyTabOptions",
                              operation: 4,
                              value: "companyTabOptions"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, true);
                              return true;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCompanyTabOptions"] != null &&
                        typeof $steps["updateCompanyTabOptions"] === "object" &&
                        typeof $steps["updateCompanyTabOptions"].then ===
                          "function"
                      ) {
                        $steps["updateCompanyTabOptions"] = await $steps[
                          "updateCompanyTabOptions"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/image79.png",
                      fullWidth: 3532,
                      fullHeight: 720,
                      aspectRatio: undefined
                    }}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7XwQo)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__d117V,
                        {
                          [sty.textcompanyTabOptions__d117VYrJvD]: hasVariant(
                            $state,
                            "companyTabOptions",
                            "companyTabOptions"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <span
                            data-plasmic-name={"span"}
                            data-plasmic-override={overrides.span}
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span
                            )}
                          >
                            {"Pioneering Software Excellence "}
                          </span>
                        }
                        <React.Fragment>{"in South Africa"}</React.Fragment>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rsgP
                      )}
                    >
                      {
                        "Our products are tailor-made to meet every one of your software requirements, We make Web & Mobile Applications, B2B or B2C Products"
                      }
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___6CFQv)}
                  >
                    <Button2
                      data-plasmic-name={"button2"}
                      data-plasmic-override={overrides.button2}
                      className={classNames("__wab_instance", sty.button2)}
                      link={"https://calendar.app.google/7GAyDKQLPvjA5rca6"}
                      shape={"rounded"}
                      showEndIcon={true}
                      target={true}
                    >
                      {"Book meeting"}
                    </Button2>
                  </Stack__>
                </Stack__>
              </Stack__>
              <ParallaxWrapper
                data-plasmic-name={"scrollParallax"}
                data-plasmic-override={overrides.scrollParallax}
                className={classNames("__wab_instance", sty.scrollParallax)}
                speed={20}
              >
                <Tilt
                  className={classNames("__wab_instance", sty.tilt__bECu)}
                  tiltEnable={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? false
                      : undefined
                  }
                  trackOnWindow={false}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qsaeW)}
                  >
                    {(() => {
                      const child$Props = {
                        arrows: false,
                        autoplay: true,
                        autoplaySpeed: 5000,
                        beforeChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "currentSlide",
                            ["sliderCarousel", "currentSlide"],
                            SliderWrapper_Helpers
                          ),
                        centerMode: true,
                        centerPadding: "0",
                        className: classNames(
                          "__wab_instance",
                          sty.sliderCarousel
                        ),
                        cssEase: "linear",
                        dots: false,
                        fade: true,
                        initialSlide: generateStateValueProp($state, [
                          "sliderCarousel",
                          "currentSlide"
                        ]),
                        pauseOnDotsHover: false,
                        pauseOnHover: false,
                        ref: ref => {
                          $refs["sliderCarousel"] = ref;
                        },
                        sliderScopeClassName: sty["sliderCarousel__slider"],
                        speed: 1000,
                        swipeToSlide: true,
                        vertical: true
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "currentSlide",
                            plasmicStateName: "sliderCarousel.currentSlide"
                          }
                        ],
                        [],
                        SliderWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <SliderWrapper
                          data-plasmic-name={"sliderCarousel"}
                          data-plasmic-override={overrides.sliderCarousel}
                          {...child$Props}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dsEeo
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__hbNa)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"550px"}
                              src={{
                                src: "/plasmic/new_mv_technologies_website/images/_01LabourLinkMockupPng13.png",
                                fullWidth: 6452,
                                fullHeight: 6452,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ni3R4
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__p3UcS)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"550px"}
                              src={{
                                src: "/plasmic/new_mv_technologies_website/images/_02HabuildMockupPng3.png",
                                fullWidth: 6452,
                                fullHeight: 6452,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jwmce
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___7Bkh6)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"550px"}
                              src={{
                                src: "/plasmic/new_mv_technologies_website/images/_03SatvaOneMockupPng6.png",
                                fullWidth: 6452,
                                fullHeight: 6452,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__w2E9C
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__gMgU)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"550px"}
                              src={{
                                src: "/plasmic/new_mv_technologies_website/images/_04MaroiBoerderyMockupPng5.png",
                                fullWidth: 6452,
                                fullHeight: 6452,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ddcPi
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__ovmM)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"550px"}
                              src={{
                                src: "/plasmic/new_mv_technologies_website/images/_05InnowellMockupPng4.png",
                                fullWidth: 6452,
                                fullHeight: 6452,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dhxHr
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__r5Yvj)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"550px"}
                              src={{
                                src: "/plasmic/new_mv_technologies_website/images/_06DcmShriramMockupPng5.png",
                                fullWidth: 6400,
                                fullHeight: 6400,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rwyAe
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__nnuxf)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"550px"}
                              src={{
                                src: "/plasmic/new_mv_technologies_website/images/_07StarBazaarMockupPng4.png",
                                fullWidth: 6400,
                                fullHeight: 6400,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                        </SliderWrapper>
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__l17G)}
                    />
                  </div>
                </Tilt>
              </ParallaxWrapper>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yputJ)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zkavf
              )}
            >
              {"Trusted by"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xgRYt)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns___5SliP)}
              >
                <div className={classNames(projectcss.all, sty.column___375K)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__kzPn2)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/labourLinkLogo1Png2.png",
                      fullWidth: 425,
                      fullHeight: 80,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__swAHp)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__lrThz)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "100%"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/habuildLogoPng3.png",
                      fullWidth: 425,
                      fullHeight: 80,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__mkmsU)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__o89Sl)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "28px"
                        : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "100%"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/satvaaPng5.png",
                      fullWidth: 425,
                      fullHeight: 80,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__kvrG)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__xGiRp)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "100%"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/starBazzarLogoPng2.png",
                      fullWidth: 425,
                      fullHeight: 80,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__uJi9Z)}
              >
                <div className={classNames(projectcss.all, sty.column__ccOq4)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dim07)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/maroiBoerderyBkLogoPng3.png",
                      fullWidth: 1116,
                      fullHeight: 192,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__fg3Xj)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___9Dz5H)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "100%"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/innowellLogoPng3.png",
                      fullWidth: 425,
                      fullHeight: 80,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__b4L7F)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__kqchX)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "100%"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/dcmShriRamPng2.png",
                      fullWidth: 425,
                      fullHeight: 80,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__tXPtJ)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__syWnk)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "100%"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/bharatPeLogoPng2.png",
                      fullWidth: 425,
                      fullHeight: 80,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
        <section
          data-plasmic-name={"ourServicesSection"}
          data-plasmic-override={overrides.ourServicesSection}
          className={classNames(projectcss.all, sty.ourServicesSection)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__acIt)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pjdlr
              )}
            >
              {"Scale your business with cost-effective software development"}
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"ourServices"}
            data-plasmic-override={overrides.ourServices}
            hasGap={true}
            className={classNames(projectcss.all, sty.ourServices)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"outsourcingSoftware2"}
              data-plasmic-override={overrides.outsourcingSoftware2}
              hasGap={true}
              className={classNames(projectcss.all, sty.outsourcingSoftware2)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"text8"}
                data-plasmic-override={overrides.text8}
                hasGap={true}
                className={classNames(projectcss.all, sty.text8)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__z4OlJ)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"outsourcing"}
                    data-plasmic-override={overrides.outsourcing}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.outsourcing)}
                  >
                    <Frame9Icon
                      className={classNames(projectcss.all, sty.svg__lBvQ)}
                      role={"img"}
                    />
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rUw8
                    )}
                  >
                    {"Outsourcing Software"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eSVcT
                  )}
                >
                  {
                    "We deliver tailored solutions, transferring all deliverables and expertise to your organization upon project completion, efficiently addressing your business needs."
                  }
                </div>
                <Tab
                  data-plasmic-name={"tab2"}
                  data-plasmic-override={overrides.tab2}
                  className={classNames("__wab_instance", sty.tab2)}
                  onButtonClick2={async event => {
                    const $steps = {};

                    $steps["goToCustomSoftware"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/custom-software`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToCustomSoftware"] != null &&
                      typeof $steps["goToCustomSoftware"] === "object" &&
                      typeof $steps["goToCustomSoftware"].then === "function"
                    ) {
                      $steps["goToCustomSoftware"] = await $steps[
                        "goToCustomSoftware"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__euZ5I
                    )}
                  >
                    {"Know more ..."}
                  </div>
                </Tab>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"laborLinkVisual2"}
                data-plasmic-override={overrides.laborLinkVisual2}
                hasGap={true}
                className={classNames(projectcss.all, sty.laborLinkVisual2)}
              >
                <Tilt
                  className={classNames("__wab_instance", sty.tilt__q6GIs)}
                  glareEnable={false}
                  gyroscope={false}
                  perspective={2000}
                  scale={1}
                  tiltEnable={false}
                  trackOnWindow={false}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__b6WUh)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/_50316581Png.png",
                      fullWidth: 3000,
                      fullHeight: 2000,
                      aspectRatio: undefined
                    }}
                  />
                </Tilt>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"technologicalPartnership"}
              data-plasmic-override={overrides.technologicalPartnership}
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.technologicalPartnership
              )}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"text11"}
                data-plasmic-override={overrides.text11}
                hasGap={true}
                className={classNames(projectcss.all, sty.text11)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__i2MgM)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"technologicalPartnership3"}
                    data-plasmic-override={overrides.technologicalPartnership3}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.technologicalPartnership3
                    )}
                  >
                    <Frame10Icon
                      className={classNames(projectcss.all, sty.svg__aIzuE)}
                      role={"img"}
                    />
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jpU3Z
                    )}
                  >
                    {"Technological Partnership"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qNdPc
                  )}
                >
                  {
                    "We dive into your business, brainstorm solutions, gather feedback, and optimize infrastructure to boost efficiency."
                  }
                </div>
                <Tab
                  data-plasmic-name={"tab5"}
                  data-plasmic-override={overrides.tab5}
                  className={classNames("__wab_instance", sty.tab5)}
                  onButtonClick2={async event => {
                    const $steps = {};

                    $steps["goToHireSoftwareDevelopers"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/hire-software-developers`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHireSoftwareDevelopers"] != null &&
                      typeof $steps["goToHireSoftwareDevelopers"] ===
                        "object" &&
                      typeof $steps["goToHireSoftwareDevelopers"].then ===
                        "function"
                    ) {
                      $steps["goToHireSoftwareDevelopers"] = await $steps[
                        "goToHireSoftwareDevelopers"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jyLkQ
                    )}
                  >
                    {"Know more ..."}
                  </div>
                </Tab>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"ilustations"}
                data-plasmic-override={overrides.ilustations}
                hasGap={true}
                className={classNames(projectcss.all, sty.ilustations)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__zXkgv)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/new_mv_technologies_website/images/orgCoralOfc02Concept04Converted1Png3.png",
                    fullWidth: 3000,
                    fullHeight: 2000,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"technologicalPartnerships"}
              data-plasmic-override={overrides.technologicalPartnerships}
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.technologicalPartnerships
              )}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"laborLinkVisual3"}
                data-plasmic-override={overrides.laborLinkVisual3}
                hasGap={true}
                className={classNames(projectcss.all, sty.laborLinkVisual3)}
              >
                <Tilt
                  className={classNames("__wab_instance", sty.tilt__sbZ12)}
                  tiltEnable={false}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__lvZu8)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/orgCoralOfc02Concept04Converted1Png3.png",
                      fullWidth: 3000,
                      fullHeight: 2000,
                      aspectRatio: undefined
                    }}
                  />
                </Tilt>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"text9"}
                data-plasmic-override={overrides.text9}
                hasGap={true}
                className={classNames(projectcss.all, sty.text9)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lwQPg)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"technologicalPartnership2"}
                    data-plasmic-override={overrides.technologicalPartnership2}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.technologicalPartnership2
                    )}
                  >
                    <Frame10Icon
                      className={classNames(projectcss.all, sty.svg__jjKh1)}
                      role={"img"}
                    />
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lp5Rf
                    )}
                  >
                    {"Technological Partnership"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8KXtB
                  )}
                >
                  {
                    "We dive into your business, brainstorm solutions, gather feedback, and optimize infrastructure to boost efficiency."
                  }
                </div>
                <Tab
                  data-plasmic-name={"tab3"}
                  data-plasmic-override={overrides.tab3}
                  className={classNames("__wab_instance", sty.tab3)}
                  onButtonClick2={async event => {
                    const $steps = {};

                    $steps["goToSoftwareMaintenance"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/software-maintenance`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToSoftwareMaintenance"] != null &&
                      typeof $steps["goToSoftwareMaintenance"] === "object" &&
                      typeof $steps["goToSoftwareMaintenance"].then ===
                        "function"
                    ) {
                      $steps["goToSoftwareMaintenance"] = await $steps[
                        "goToSoftwareMaintenance"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jxZrP
                    )}
                  >
                    {"Know more ..."}
                  </div>
                </Tab>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"outsourcingSoftware3"}
              data-plasmic-override={overrides.outsourcingSoftware3}
              hasGap={true}
              className={classNames(projectcss.all, sty.outsourcingSoftware3)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"text10"}
                data-plasmic-override={overrides.text10}
                hasGap={true}
                className={classNames(projectcss.all, sty.text10)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pzCdy)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"dedicatedTeams2"}
                    data-plasmic-override={overrides.dedicatedTeams2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.dedicatedTeams2)}
                  >
                    <Frame11Icon
                      className={classNames(projectcss.all, sty.svg__sxEnm)}
                      role={"img"}
                    />
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6NLhT
                    )}
                  >
                    {"Dedicated Teams"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xizsf
                  )}
                >
                  {
                    "We offer dedicated development teams, working exclusively under your supervision, ensuring a well-rounded, effective approach."
                  }
                </div>
                <Tab
                  data-plasmic-name={"tab4"}
                  data-plasmic-override={overrides.tab4}
                  className={classNames("__wab_instance", sty.tab4)}
                  onButtonClick2={async event => {
                    const $steps = {};

                    $steps["goToHireSoftwareDevelopers"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/hire-software-developers`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHireSoftwareDevelopers"] != null &&
                      typeof $steps["goToHireSoftwareDevelopers"] ===
                        "object" &&
                      typeof $steps["goToHireSoftwareDevelopers"].then ===
                        "function"
                    ) {
                      $steps["goToHireSoftwareDevelopers"] = await $steps[
                        "goToHireSoftwareDevelopers"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xJjpH
                    )}
                  >
                    {"Know more ..."}
                  </div>
                </Tab>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"laborLinkVisual4"}
                data-plasmic-override={overrides.laborLinkVisual4}
                hasGap={true}
                className={classNames(projectcss.all, sty.laborLinkVisual4)}
              >
                <Tilt
                  className={classNames("__wab_instance", sty.tilt__dWtWv)}
                  tiltEnable={false}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ck5Gd)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/work4Converted1Png2.png",
                      fullWidth: 3000,
                      fullHeight: 2000,
                      aspectRatio: undefined
                    }}
                  />
                </Tilt>
              </Stack__>
            </Stack__>
          </Stack__>
        </section>
        <OurVision
          data-plasmic-name={"ourVision"}
          data-plasmic-override={overrides.ourVision}
          className={classNames("__wab_instance", sty.ourVision, {
            [sty.ourVisioncompanyTabOptions]: hasVariant(
              $state,
              "companyTabOptions",
              "companyTabOptions"
            )
          })}
        />

        <OffloadScale
          data-plasmic-name={"offloadScale"}
          data-plasmic-override={overrides.offloadScale}
          className={classNames("__wab_instance", sty.offloadScale)}
        />

        <ComparisonSection
          data-plasmic-name={"comparisonSection"}
          data-plasmic-override={overrides.comparisonSection}
          className={classNames("__wab_instance", sty.comparisonSection)}
        />

        <LongTermProfitability
          data-plasmic-name={"longTermProfitability"}
          data-plasmic-override={overrides.longTermProfitability}
          className={classNames("__wab_instance", sty.longTermProfitability)}
        />

        <WeExcelInSection
          data-plasmic-name={"weExcelInSection"}
          data-plasmic-override={overrides.weExcelInSection}
          className={classNames("__wab_instance", sty.weExcelInSection)}
        />

        <ProductOverview
          data-plasmic-name={"productOverview"}
          data-plasmic-override={overrides.productOverview}
          className={classNames("__wab_instance", sty.productOverview)}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox___5IVdv, {
            [sty.freeBoxcompanyTabOptions___5IVdvYrJvD]: hasVariant(
              $state,
              "companyTabOptions",
              "companyTabOptions"
            )
          })}
        >
          <CompanyTab
            data-plasmic-name={"companyTab"}
            data-plasmic-override={overrides.companyTab}
            className={classNames("__wab_instance", sty.companyTab, {
              [sty.companyTabcompanyTabOptions]: hasVariant(
                $state,
                "companyTabOptions",
                "companyTabOptions"
              )
            })}
            companyTabOptions={
              hasVariant($state, "companyTabOptions", "companyTabOptions")
                ? true
                : undefined
            }
          />

          <Frame20Icon
            className={classNames(projectcss.all, sty.svg__w4LA5, {
              [sty.svgcompanyTabOptions__w4LA5YrJvD]: hasVariant(
                $state,
                "companyTabOptions",
                "companyTabOptions"
              )
            })}
            onClick={async event => {
              const $steps = {};

              $steps["updateCompanyTabOptions"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "companyTabOptions",
                      operation: 6,
                      value: "companyTabOptions"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCompanyTabOptions"] != null &&
                typeof $steps["updateCompanyTabOptions"] === "object" &&
                typeof $steps["updateCompanyTabOptions"].then === "function"
              ) {
                $steps["updateCompanyTabOptions"] = await $steps[
                  "updateCompanyTabOptions"
                ];
              }
            }}
            role={"img"}
          />
        </div>
        <Testimonials
          data-plasmic-name={"testimonials"}
          data-plasmic-override={overrides.testimonials}
          className={classNames("__wab_instance", sty.testimonials, {
            [sty.testimonialscompanyTabOptions]: hasVariant(
              $state,
              "companyTabOptions",
              "companyTabOptions"
            )
          })}
          companyTabOptions={
            hasVariant($state, "companyTabOptions", "companyTabOptions")
              ? true
              : undefined
          }
        />

        <FaqSection
          data-plasmic-name={"faqSection"}
          data-plasmic-override={overrides.faqSection}
          className={classNames("__wab_instance", sty.faqSection, {
            [sty.faqSectioncompanyTabOptions]: hasVariant(
              $state,
              "companyTabOptions",
              "companyTabOptions"
            )
          })}
          companyTabOptions={
            hasVariant($state, "companyTabOptions", "companyTabOptions")
              ? true
              : undefined
          }
        />

        <ConnectWithUs
          data-plasmic-name={"connectWithUs"}
          data-plasmic-override={overrides.connectWithUs}
          className={classNames("__wab_instance", sty.connectWithUs, {
            [sty.connectWithUscompanyTabOptions]: hasVariant(
              $state,
              "companyTabOptions",
              "companyTabOptions"
            )
          })}
        />

        <NavFooter
          data-plasmic-name={"navFooter"}
          data-plasmic-override={overrides.navFooter}
          className={classNames("__wab_instance", sty.navFooter)}
        />

        <NavHeader
          data-plasmic-name={"navHeader"}
          data-plasmic-override={overrides.navHeader}
          className={classNames("__wab_instance", sty.navHeader, {
            [sty.navHeadercompanyTabOptions]: hasVariant(
              $state,
              "companyTabOptions",
              "companyTabOptions"
            )
          })}
          scrolledVariant={(() => {
            try {
              return $ctx.isScrolled;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        />

        <NavHeader
          data-plasmic-name={"navHeader2"}
          data-plasmic-override={overrides.navHeader2}
          className={classNames("__wab_instance", sty.navHeader2, {
            [sty.navHeader2companyTabOptions]: hasVariant(
              $state,
              "companyTabOptions",
              "companyTabOptions"
            )
          })}
          onAbortCapture={async event => {
            const $steps = {};

            $steps["updateCompanyTabOptions"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "companyTabOptions",
                    operation: 6,
                    value: "companyTabOptions"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateCompanyTabOptions"] != null &&
              typeof $steps["updateCompanyTabOptions"] === "object" &&
              typeof $steps["updateCompanyTabOptions"].then === "function"
            ) {
              $steps["updateCompanyTabOptions"] = await $steps[
                "updateCompanyTabOptions"
              ];
            }
          }}
          onButtonClick2={async event => {
            const $steps = {};

            $steps["updateCompanyTabOptions"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "companyTabOptions",
                    operation: 4,
                    value: "companyTabOptions"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, true);
                    return true;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateCompanyTabOptions"] != null &&
              typeof $steps["updateCompanyTabOptions"] === "object" &&
              typeof $steps["updateCompanyTabOptions"].then === "function"
            ) {
              $steps["updateCompanyTabOptions"] = await $steps[
                "updateCompanyTabOptions"
              ];
            }
          }}
          onCompanyClick={async () => {
            const $steps = {};

            $steps["updateSliderCarouselCurrentSlide"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["sliderCarousel", "currentSlide"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateSliderCarouselCurrentSlide"] != null &&
              typeof $steps["updateSliderCarouselCurrentSlide"] === "object" &&
              typeof $steps["updateSliderCarouselCurrentSlide"].then ===
                "function"
            ) {
              $steps["updateSliderCarouselCurrentSlide"] = await $steps[
                "updateSliderCarouselCurrentSlide"
              ];
            }
          }}
          onServiceButtonClick2={async event => {
            const $steps = {};

            $steps["updateSliderCarouselCurrentSlide"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["sliderCarousel", "currentSlide"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateSliderCarouselCurrentSlide"] != null &&
              typeof $steps["updateSliderCarouselCurrentSlide"] === "object" &&
              typeof $steps["updateSliderCarouselCurrentSlide"].then ===
                "function"
            ) {
              $steps["updateSliderCarouselCurrentSlide"] = await $steps[
                "updateSliderCarouselCurrentSlide"
              ];
            }
          }}
          scrolledVariant={(() => {
            try {
              return $ctx.isScrolled;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__dUQuk)}
            displayHeight={"40px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            src={{
              src: "/plasmic/new_mv_technologies_website/images/image78.png",
              fullWidth: 720,
              fullHeight: 720,
              aspectRatio: undefined
            }}
          />
        </NavHeader>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "heroSection",
    "span",
    "button2",
    "scrollParallax",
    "sliderCarousel",
    "ourServicesSection",
    "ourServices",
    "outsourcingSoftware2",
    "text8",
    "outsourcing",
    "tab2",
    "laborLinkVisual2",
    "technologicalPartnership",
    "text11",
    "technologicalPartnership3",
    "tab5",
    "ilustations",
    "technologicalPartnerships",
    "laborLinkVisual3",
    "text9",
    "technologicalPartnership2",
    "tab3",
    "outsourcingSoftware3",
    "text10",
    "dedicatedTeams2",
    "tab4",
    "laborLinkVisual4",
    "ourVision",
    "offloadScale",
    "comparisonSection",
    "longTermProfitability",
    "weExcelInSection",
    "productOverview",
    "companyTab",
    "testimonials",
    "faqSection",
    "connectWithUs",
    "navFooter",
    "navHeader",
    "navHeader2"
  ],
  heroSection: [
    "heroSection",
    "span",
    "button2",
    "scrollParallax",
    "sliderCarousel"
  ],
  span: ["span"],
  button2: ["button2"],
  scrollParallax: ["scrollParallax", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"],
  ourServicesSection: [
    "ourServicesSection",
    "ourServices",
    "outsourcingSoftware2",
    "text8",
    "outsourcing",
    "tab2",
    "laborLinkVisual2",
    "technologicalPartnership",
    "text11",
    "technologicalPartnership3",
    "tab5",
    "ilustations",
    "technologicalPartnerships",
    "laborLinkVisual3",
    "text9",
    "technologicalPartnership2",
    "tab3",
    "outsourcingSoftware3",
    "text10",
    "dedicatedTeams2",
    "tab4",
    "laborLinkVisual4"
  ],
  ourServices: [
    "ourServices",
    "outsourcingSoftware2",
    "text8",
    "outsourcing",
    "tab2",
    "laborLinkVisual2",
    "technologicalPartnership",
    "text11",
    "technologicalPartnership3",
    "tab5",
    "ilustations",
    "technologicalPartnerships",
    "laborLinkVisual3",
    "text9",
    "technologicalPartnership2",
    "tab3",
    "outsourcingSoftware3",
    "text10",
    "dedicatedTeams2",
    "tab4",
    "laborLinkVisual4"
  ],
  outsourcingSoftware2: [
    "outsourcingSoftware2",
    "text8",
    "outsourcing",
    "tab2",
    "laborLinkVisual2"
  ],
  text8: ["text8", "outsourcing", "tab2"],
  outsourcing: ["outsourcing"],
  tab2: ["tab2"],
  laborLinkVisual2: ["laborLinkVisual2"],
  technologicalPartnership: [
    "technologicalPartnership",
    "text11",
    "technologicalPartnership3",
    "tab5",
    "ilustations"
  ],
  text11: ["text11", "technologicalPartnership3", "tab5"],
  technologicalPartnership3: ["technologicalPartnership3"],
  tab5: ["tab5"],
  ilustations: ["ilustations"],
  technologicalPartnerships: [
    "technologicalPartnerships",
    "laborLinkVisual3",
    "text9",
    "technologicalPartnership2",
    "tab3"
  ],
  laborLinkVisual3: ["laborLinkVisual3"],
  text9: ["text9", "technologicalPartnership2", "tab3"],
  technologicalPartnership2: ["technologicalPartnership2"],
  tab3: ["tab3"],
  outsourcingSoftware3: [
    "outsourcingSoftware3",
    "text10",
    "dedicatedTeams2",
    "tab4",
    "laborLinkVisual4"
  ],
  text10: ["text10", "dedicatedTeams2", "tab4"],
  dedicatedTeams2: ["dedicatedTeams2"],
  tab4: ["tab4"],
  laborLinkVisual4: ["laborLinkVisual4"],
  ourVision: ["ourVision"],
  offloadScale: ["offloadScale"],
  comparisonSection: ["comparisonSection"],
  longTermProfitability: ["longTermProfitability"],
  weExcelInSection: ["weExcelInSection"],
  productOverview: ["productOverview"],
  companyTab: ["companyTab"],
  testimonials: ["testimonials"],
  faqSection: ["faqSection"],
  connectWithUs: ["connectWithUs"],
  navFooter: ["navFooter"],
  navHeader: ["navHeader"],
  navHeader2: ["navHeader2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  heroSection: "div";
  span: "span";
  button2: typeof Button2;
  scrollParallax: typeof ParallaxWrapper;
  sliderCarousel: typeof SliderWrapper;
  ourServicesSection: "section";
  ourServices: "div";
  outsourcingSoftware2: "div";
  text8: "div";
  outsourcing: "div";
  tab2: typeof Tab;
  laborLinkVisual2: "div";
  technologicalPartnership: "div";
  text11: "div";
  technologicalPartnership3: "div";
  tab5: typeof Tab;
  ilustations: "div";
  technologicalPartnerships: "div";
  laborLinkVisual3: "div";
  text9: "div";
  technologicalPartnership2: "div";
  tab3: typeof Tab;
  outsourcingSoftware3: "div";
  text10: "div";
  dedicatedTeams2: "div";
  tab4: typeof Tab;
  laborLinkVisual4: "div";
  ourVision: typeof OurVision;
  offloadScale: typeof OffloadScale;
  comparisonSection: typeof ComparisonSection;
  longTermProfitability: typeof LongTermProfitability;
  weExcelInSection: typeof WeExcelInSection;
  productOverview: typeof ProductOverview;
  companyTab: typeof CompanyTab;
  testimonials: typeof Testimonials;
  faqSection: typeof FaqSection;
  connectWithUs: typeof ConnectWithUs;
  navFooter: typeof NavFooter;
  navHeader: typeof NavHeader;
  navHeader2: typeof NavHeader;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "qg9BUJrNtisePZMs8FM4BQ"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    heroSection: makeNodeComponent("heroSection"),
    span: makeNodeComponent("span"),
    button2: makeNodeComponent("button2"),
    scrollParallax: makeNodeComponent("scrollParallax"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    ourServicesSection: makeNodeComponent("ourServicesSection"),
    ourServices: makeNodeComponent("ourServices"),
    outsourcingSoftware2: makeNodeComponent("outsourcingSoftware2"),
    text8: makeNodeComponent("text8"),
    outsourcing: makeNodeComponent("outsourcing"),
    tab2: makeNodeComponent("tab2"),
    laborLinkVisual2: makeNodeComponent("laborLinkVisual2"),
    technologicalPartnership: makeNodeComponent("technologicalPartnership"),
    text11: makeNodeComponent("text11"),
    technologicalPartnership3: makeNodeComponent("technologicalPartnership3"),
    tab5: makeNodeComponent("tab5"),
    ilustations: makeNodeComponent("ilustations"),
    technologicalPartnerships: makeNodeComponent("technologicalPartnerships"),
    laborLinkVisual3: makeNodeComponent("laborLinkVisual3"),
    text9: makeNodeComponent("text9"),
    technologicalPartnership2: makeNodeComponent("technologicalPartnership2"),
    tab3: makeNodeComponent("tab3"),
    outsourcingSoftware3: makeNodeComponent("outsourcingSoftware3"),
    text10: makeNodeComponent("text10"),
    dedicatedTeams2: makeNodeComponent("dedicatedTeams2"),
    tab4: makeNodeComponent("tab4"),
    laborLinkVisual4: makeNodeComponent("laborLinkVisual4"),
    ourVision: makeNodeComponent("ourVision"),
    offloadScale: makeNodeComponent("offloadScale"),
    comparisonSection: makeNodeComponent("comparisonSection"),
    longTermProfitability: makeNodeComponent("longTermProfitability"),
    weExcelInSection: makeNodeComponent("weExcelInSection"),
    productOverview: makeNodeComponent("productOverview"),
    companyTab: makeNodeComponent("companyTab"),
    testimonials: makeNodeComponent("testimonials"),
    faqSection: makeNodeComponent("faqSection"),
    connectWithUs: makeNodeComponent("connectWithUs"),
    navFooter: makeNodeComponent("navFooter"),
    navHeader: makeNodeComponent("navHeader"),
    navHeader2: makeNodeComponent("navHeader2"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
