// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: OV4srBnBL7C8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicTestimonialCard.module.css"; // plasmic-import: OV4srBnBL7C8/css

import Star1Icon from "./icons/PlasmicIcon__Star1"; // plasmic-import: KtBNLA_BHL9T/icon

createPlasmicElementProxy;

export type PlasmicTestimonialCard__VariantMembers = {};
export type PlasmicTestimonialCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestimonialCard__VariantsArgs;
export const PlasmicTestimonialCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTestimonialCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTestimonialCard__ArgsType;
export const PlasmicTestimonialCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicTestimonialCard__OverridesType = {
  root?: Flex__<"div">;
  testimonialCard?: Flex__<"div">;
};

export interface DefaultTestimonialCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestimonialCard__RenderFunc(props: {
  variants: PlasmicTestimonialCard__VariantsArgs;
  args: PlasmicTestimonialCard__ArgsType;
  overrides: PlasmicTestimonialCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_vidyayatan_landing_page_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wasMu)}>
        <Stack__
          as={"div"}
          data-plasmic-name={"testimonialCard"}
          data-plasmic-override={overrides.testimonialCard}
          hasGap={true}
          className={classNames(projectcss.all, sty.testimonialCard)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__tlLoG)}>
            {renderPlasmicSlot({
              defaultContents:
                "Working with Vidyayatan Technologies has been significantly beneficial for us. The best part about working with them is that they make sure to understand our unique challenges in South Africa for Farm Security and then work consistently to deliver to those needs. Their truly qualified team works with precision to understand our challenges and make sure we are able to overcome them. And we are absolutely thrilled to have them as our technology partner.",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fexrW)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.columns__lhXtp)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__gNsYc)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cCZr
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___1Cjuo)}
                          displayHeight={"64px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"64px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/new_mv_technologies_website/images/anneliNelPng.png",
                            fullWidth: 576,
                            fullHeight: 576,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5KmlF
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y4Jl2
                            )}
                          >
                            {"Anneli Nel"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ui0Vw
                            )}
                          >
                            {"CEO | Labour Link"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gKne3
                            )}
                          >
                            {"Limpopo, South Africa"}
                          </div>
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__tp2Bw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oOUle
                        )}
                      >
                        <Star1Icon
                          className={classNames(projectcss.all, sty.svg__vQjRo)}
                          role={"img"}
                        />

                        <Star1Icon
                          className={classNames(projectcss.all, sty.svg__xK2Ug)}
                          role={"img"}
                        />

                        <Star1Icon
                          className={classNames(projectcss.all, sty.svg__yoLvF)}
                          role={"img"}
                        />

                        <Star1Icon
                          className={classNames(projectcss.all, sty.svg__lYtM5)}
                          role={"img"}
                        />

                        <Star1Icon
                          className={classNames(projectcss.all, sty.svg__oAh9H)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__qumi6)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__mXLfr)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pl1MM
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__fVpJr)}
                          displayHeight={"48px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"48px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/new_mv_technologies_website/images/anneliNelPng.png",
                            fullWidth: 576,
                            fullHeight: 576,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mnpRs
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__u3VRo
                            )}
                          >
                            {"Anneli Nel"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nCqMe
                            )}
                          >
                            {"CEO | Labour Link"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i321D
                            )}
                          >
                            {"Limpopo, South Africa"}
                          </div>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__smwIz
                        )}
                      >
                        <Star1Icon
                          className={classNames(projectcss.all, sty.svg__xpIqC)}
                          role={"img"}
                        />

                        <Star1Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___1Zoxn
                          )}
                          role={"img"}
                        />

                        <Star1Icon
                          className={classNames(projectcss.all, sty.svg__qbJjx)}
                          role={"img"}
                        />

                        <Star1Icon
                          className={classNames(projectcss.all, sty.svg__gsi6D)}
                          role={"img"}
                        />

                        <Star1Icon
                          className={classNames(projectcss.all, sty.svg__wt0W)}
                          role={"img"}
                        />
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </React.Fragment>
              ),
              value: args.slot
            })}
          </Stack__>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "testimonialCard"],
  testimonialCard: ["testimonialCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  testimonialCard: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestimonialCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestimonialCard__VariantsArgs;
    args?: PlasmicTestimonialCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestimonialCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTestimonialCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestimonialCard__ArgProps,
          internalVariantPropNames: PlasmicTestimonialCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestimonialCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestimonialCard";
  } else {
    func.displayName = `PlasmicTestimonialCard.${nodeName}`;
  }
  return func;
}

export const PlasmicTestimonialCard = Object.assign(
  // Top-level PlasmicTestimonialCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    testimonialCard: makeNodeComponent("testimonialCard"),

    // Metadata about props expected for PlasmicTestimonialCard
    internalVariantProps: PlasmicTestimonialCard__VariantProps,
    internalArgProps: PlasmicTestimonialCard__ArgProps
  }
);

export default PlasmicTestimonialCard;
/* prettier-ignore-end */
