// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: pZ9Yrp1wEL8X

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Tab from "../../Tab"; // plasmic-import: jf_z6wjG7bBo/component
import Button2 from "../../Button2"; // plasmic-import: iFFcBUnvZUl0/component
import CompanyTab from "../../CompanyTab"; // plasmic-import: tJAIrxUZQNcn/component
import ServicesTab from "../../ServicesTab"; // plasmic-import: eZbV5YK0H1YM/component
import IndustryTab from "../../IndustryTab"; // plasmic-import: MM66Nfn3G1us/component

import { useScreenVariants as useScreenVariantsptc9VYm7Ur9B } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PTC9vYM7UR9b/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicNavHeader.module.css"; // plasmic-import: pZ9Yrp1wEL8X/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tSFoGfIVWAwT/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: FoPRmBUdi-FM/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: BdOJXbJwvrwW/icon
import Frame20Icon from "./icons/PlasmicIcon__Frame20"; // plasmic-import: 6tYQqlLmStc2/icon

createPlasmicElementProxy;

export type PlasmicNavHeader__VariantMembers = {
  scrolledVariant: "scrolledVariant";
  companyPageOpen: "companyPageOpen";
  servicesPageOpen: "servicesPageOpen";
  industryPageOpen: "industryPageOpen";
};
export type PlasmicNavHeader__VariantsArgs = {
  scrolledVariant?: SingleBooleanChoiceArg<"scrolledVariant">;
  companyPageOpen?: SingleBooleanChoiceArg<"companyPageOpen">;
  servicesPageOpen?: SingleBooleanChoiceArg<"servicesPageOpen">;
  industryPageOpen?: SingleBooleanChoiceArg<"industryPageOpen">;
};
type VariantPropType = keyof PlasmicNavHeader__VariantsArgs;
export const PlasmicNavHeader__VariantProps = new Array<VariantPropType>(
  "scrolledVariant",
  "companyPageOpen",
  "servicesPageOpen",
  "industryPageOpen"
);

export type PlasmicNavHeader__ArgsType = {
  children?: React.ReactNode;
  onCompanyClick?: () => void;
  onButtonClick2?: (event: any) => void;
  onServiceButtonClick2?: (event: any) => void;
  onAbortCapture?: (event: any) => void;
};
type ArgPropType = keyof PlasmicNavHeader__ArgsType;
export const PlasmicNavHeader__ArgProps = new Array<ArgPropType>(
  "children",
  "onCompanyClick",
  "onButtonClick2",
  "onServiceButtonClick2",
  "onAbortCapture"
);

export type PlasmicNavHeader__OverridesType = {
  header?: Flex__<"div">;
  tab2?: Flex__<typeof Tab>;
  tab8?: Flex__<typeof Tab>;
  tab3?: Flex__<typeof Tab>;
  tab7?: Flex__<typeof Tab>;
  tab4?: Flex__<typeof Tab>;
  tab5?: Flex__<typeof Tab>;
  tab6?: Flex__<typeof Tab>;
  tab9?: Flex__<typeof Tab>;
  tab10?: Flex__<typeof Tab>;
  tab11?: Flex__<typeof Tab>;
  tab12?: Flex__<typeof Tab>;
  tab13?: Flex__<typeof Tab>;
  tab14?: Flex__<typeof Tab>;
  tab15?: Flex__<typeof Tab>;
  button2?: Flex__<typeof Button2>;
  companyTab?: Flex__<typeof CompanyTab>;
  servicesTab?: Flex__<typeof ServicesTab>;
  industryTab?: Flex__<typeof IndustryTab>;
};

export interface DefaultNavHeaderProps {
  children?: React.ReactNode;
  onCompanyClick?: () => void;
  onButtonClick2?: (event: any) => void;
  onServiceButtonClick2?: (event: any) => void;
  onAbortCapture?: (event: any) => void;
  scrolledVariant?: SingleBooleanChoiceArg<"scrolledVariant">;
  companyPageOpen?: SingleBooleanChoiceArg<"companyPageOpen">;
  servicesPageOpen?: SingleBooleanChoiceArg<"servicesPageOpen">;
  industryPageOpen?: SingleBooleanChoiceArg<"industryPageOpen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavHeader__RenderFunc(props: {
  variants: PlasmicNavHeader__VariantsArgs;
  args: PlasmicNavHeader__ArgsType;
  overrides: PlasmicNavHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "scrolledVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.scrolledVariant
      },
      {
        path: "companyPageOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.companyPageOpen
      },
      {
        path: "servicesPageOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.servicesPageOpen
      },
      {
        path: "industryPageOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.industryPageOpen
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsptc9VYm7Ur9B()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"header"}
      data-plasmic-override={overrides.header}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_vidyayatan_landing_page_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.header,
        {
          [sty.headercompanyPageOpen]: hasVariant(
            $state,
            "companyPageOpen",
            "companyPageOpen"
          ),
          [sty.headerindustryPageOpen]: hasVariant(
            $state,
            "industryPageOpen",
            "industryPageOpen"
          ),
          [sty.headerindustryPageOpen_servicesPageOpen]:
            hasVariant($state, "industryPageOpen", "industryPageOpen") &&
            hasVariant($state, "servicesPageOpen", "servicesPageOpen"),
          [sty.headerscrolledVariant]: hasVariant(
            $state,
            "scrolledVariant",
            "scrolledVariant"
          ),
          [sty.headerservicesPageOpen]: hasVariant(
            $state,
            "servicesPageOpen",
            "servicesPageOpen"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__ggQ0W, {
          [sty.freeBoxcompanyPageOpen__ggQ0W6UNc5]: hasVariant(
            $state,
            "companyPageOpen",
            "companyPageOpen"
          ),
          [sty.freeBoxservicesPageOpen__ggQ0WfCmcR]: hasVariant(
            $state,
            "servicesPageOpen",
            "servicesPageOpen"
          )
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ayNfy, {
            [sty.freeBoxcompanyPageOpen__ayNfy6UNc5]: hasVariant(
              $state,
              "companyPageOpen",
              "companyPageOpen"
            ),
            [sty.freeBoxscrolledVariant__ayNfy5QQyu]: hasVariant(
              $state,
              "scrolledVariant",
              "scrolledVariant"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__dk75O)}
            onClick={async event => {
              const $steps = {};

              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = { destination: `/` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHomepage"] != null &&
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await $steps["goToHomepage"];
              }
            }}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__mpDqg)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: "/plasmic/new_mv_technologies_website/images/image78.png",
                    fullWidth: 720,
                    fullHeight: 720,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.children
            })}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nojeX)}
          >
            <Tab
              data-plasmic-name={"tab2"}
              data-plasmic-override={overrides.tab2}
              className={classNames("__wab_instance", sty.tab2, {
                [sty.tab2companyPageOpen]: hasVariant(
                  $state,
                  "companyPageOpen",
                  "companyPageOpen"
                )
              })}
              onAbortCapture={args.onAbortCapture}
              onButtonClick2={async event => {
                const $steps = {};

                $steps["updateCompanyPageOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "companyPageOpen",
                        operation: 4
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCompanyPageOpen"] != null &&
                  typeof $steps["updateCompanyPageOpen"] === "object" &&
                  typeof $steps["updateCompanyPageOpen"].then === "function"
                ) {
                  $steps["updateCompanyPageOpen"] = await $steps[
                    "updateCompanyPageOpen"
                  ];
                }

                $steps["updateServicesPageOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "servicesPageOpen",
                        operation: 6
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateServicesPageOpen"] != null &&
                  typeof $steps["updateServicesPageOpen"] === "object" &&
                  typeof $steps["updateServicesPageOpen"].then === "function"
                ) {
                  $steps["updateServicesPageOpen"] = await $steps[
                    "updateServicesPageOpen"
                  ];
                }

                $steps["updateIndustryPageOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "industryPageOpen",
                        operation: 6
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIndustryPageOpen"] != null &&
                  typeof $steps["updateIndustryPageOpen"] === "object" &&
                  typeof $steps["updateIndustryPageOpen"].then === "function"
                ) {
                  $steps["updateIndustryPageOpen"] = await $steps[
                    "updateIndustryPageOpen"
                  ];
                }
              }}
            >
              {"Company"}
            </Tab>
            <Tab
              data-plasmic-name={"tab8"}
              data-plasmic-override={overrides.tab8}
              className={classNames("__wab_instance", sty.tab8, {
                [sty.tab8servicesPageOpen]: hasVariant(
                  $state,
                  "servicesPageOpen",
                  "servicesPageOpen"
                )
              })}
              onButtonClick2={async event => {
                const $steps = {};

                $steps["updateServicesPageOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "servicesPageOpen",
                        operation: 4
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateServicesPageOpen"] != null &&
                  typeof $steps["updateServicesPageOpen"] === "object" &&
                  typeof $steps["updateServicesPageOpen"].then === "function"
                ) {
                  $steps["updateServicesPageOpen"] = await $steps[
                    "updateServicesPageOpen"
                  ];
                }

                $steps["updateCompanyPageOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "companyPageOpen",
                        operation: 6
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCompanyPageOpen"] != null &&
                  typeof $steps["updateCompanyPageOpen"] === "object" &&
                  typeof $steps["updateCompanyPageOpen"].then === "function"
                ) {
                  $steps["updateCompanyPageOpen"] = await $steps[
                    "updateCompanyPageOpen"
                  ];
                }

                $steps["updateIndustryPageOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "industryPageOpen",
                        operation: 6
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIndustryPageOpen"] != null &&
                  typeof $steps["updateIndustryPageOpen"] === "object" &&
                  typeof $steps["updateIndustryPageOpen"].then === "function"
                ) {
                  $steps["updateIndustryPageOpen"] = await $steps[
                    "updateIndustryPageOpen"
                  ];
                }
              }}
            >
              {"Services"}
            </Tab>
            <Tab
              data-plasmic-name={"tab3"}
              data-plasmic-override={overrides.tab3}
              className={classNames("__wab_instance", sty.tab3, {
                [sty.tab3companyPageOpen]: hasVariant(
                  $state,
                  "companyPageOpen",
                  "companyPageOpen"
                )
              })}
              onButtonClick2={async event => {
                const $steps = {};

                $steps["goToProductPage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/product-page` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToProductPage"] != null &&
                  typeof $steps["goToProductPage"] === "object" &&
                  typeof $steps["goToProductPage"].then === "function"
                ) {
                  $steps["goToProductPage"] = await $steps["goToProductPage"];
                }
              }}
            >
              {"Products"}
            </Tab>
            <Tab
              data-plasmic-name={"tab7"}
              data-plasmic-override={overrides.tab7}
              className={classNames("__wab_instance", sty.tab7)}
              onButtonClick2={async event => {
                const $steps = {};

                $steps["updateIndustryPageOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "industryPageOpen",
                        operation: 4
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIndustryPageOpen"] != null &&
                  typeof $steps["updateIndustryPageOpen"] === "object" &&
                  typeof $steps["updateIndustryPageOpen"].then === "function"
                ) {
                  $steps["updateIndustryPageOpen"] = await $steps[
                    "updateIndustryPageOpen"
                  ];
                }

                $steps["updateCompanyPageOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "companyPageOpen",
                        operation: 6
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCompanyPageOpen"] != null &&
                  typeof $steps["updateCompanyPageOpen"] === "object" &&
                  typeof $steps["updateCompanyPageOpen"].then === "function"
                ) {
                  $steps["updateCompanyPageOpen"] = await $steps[
                    "updateCompanyPageOpen"
                  ];
                }

                $steps["updateServicesPageOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "servicesPageOpen",
                        operation: 6
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateServicesPageOpen"] != null &&
                  typeof $steps["updateServicesPageOpen"] === "object" &&
                  typeof $steps["updateServicesPageOpen"].then === "function"
                ) {
                  $steps["updateServicesPageOpen"] = await $steps[
                    "updateServicesPageOpen"
                  ];
                }
              }}
            >
              {"Industry"}
            </Tab>
            <Tab
              data-plasmic-name={"tab4"}
              data-plasmic-override={overrides.tab4}
              className={classNames("__wab_instance", sty.tab4)}
            >
              {"Resources"}
            </Tab>
            <Tab
              data-plasmic-name={"tab5"}
              data-plasmic-override={overrides.tab5}
              className={classNames("__wab_instance", sty.tab5, {
                [sty.tab5companyPageOpen]: hasVariant(
                  $state,
                  "companyPageOpen",
                  "companyPageOpen"
                )
              })}
              onButtonClick2={async event => {
                const $steps = {};

                $steps["goToPricingPage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/pricing-page` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPricingPage"] != null &&
                  typeof $steps["goToPricingPage"] === "object" &&
                  typeof $steps["goToPricingPage"].then === "function"
                ) {
                  $steps["goToPricingPage"] = await $steps["goToPricingPage"];
                }
              }}
            >
              {"Pricing"}
            </Tab>
            <Tab
              data-plasmic-name={"tab6"}
              data-plasmic-override={overrides.tab6}
              className={classNames("__wab_instance", sty.tab6, {
                [sty.tab6companyPageOpen]: hasVariant(
                  $state,
                  "companyPageOpen",
                  "companyPageOpen"
                )
              })}
              onButtonClick2={async event => {
                const $steps = {};

                $steps["goToContactPage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/contact-page` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToContactPage"] != null &&
                  typeof $steps["goToContactPage"] === "object" &&
                  typeof $steps["goToContactPage"].then === "function"
                ) {
                  $steps["goToContactPage"] = await $steps["goToContactPage"];
                }
              }}
            >
              {"Contact"}
            </Tab>
          </Stack__>
          {(
            hasVariant($state, "industryPageOpen", "industryPageOpen")
              ? true
              : hasVariant($state, "servicesPageOpen", "servicesPageOpen")
              ? true
              : hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : false
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gTtr2, {
                [sty.freeBoxindustryPageOpen__gTtr2AWtv]: hasVariant(
                  $state,
                  "industryPageOpen",
                  "industryPageOpen"
                ),
                [sty.freeBoxservicesPageOpen__gTtr2FCmcR]: hasVariant(
                  $state,
                  "servicesPageOpen",
                  "servicesPageOpen"
                )
              })}
            >
              <Tab
                data-plasmic-name={"tab9"}
                data-plasmic-override={overrides.tab9}
                className={classNames("__wab_instance", sty.tab9)}
                onAbortCapture={args.onAbortCapture}
                onButtonClick2={async event => {
                  const $steps = {};

                  $steps["updateCompanyPageOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "companyPageOpen",
                          operation: 4
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, true);
                          return true;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCompanyPageOpen"] != null &&
                    typeof $steps["updateCompanyPageOpen"] === "object" &&
                    typeof $steps["updateCompanyPageOpen"].then === "function"
                  ) {
                    $steps["updateCompanyPageOpen"] = await $steps[
                      "updateCompanyPageOpen"
                    ];
                  }
                }}
              >
                {"Company"}
              </Tab>
              <Tab
                data-plasmic-name={"tab10"}
                data-plasmic-override={overrides.tab10}
                className={classNames("__wab_instance", sty.tab10)}
                onButtonClick2={args.onServiceButtonClick2}
              >
                {"Services"}
              </Tab>
              <Tab
                data-plasmic-name={"tab11"}
                data-plasmic-override={overrides.tab11}
                className={classNames("__wab_instance", sty.tab11)}
              >
                {"Products"}
              </Tab>
              <Tab
                data-plasmic-name={"tab12"}
                data-plasmic-override={overrides.tab12}
                className={classNames("__wab_instance", sty.tab12)}
              >
                {"Industry"}
              </Tab>
              <Tab
                data-plasmic-name={"tab13"}
                data-plasmic-override={overrides.tab13}
                className={classNames("__wab_instance", sty.tab13)}
              >
                {"Resources"}
              </Tab>
              <Tab
                data-plasmic-name={"tab14"}
                data-plasmic-override={overrides.tab14}
                className={classNames("__wab_instance", sty.tab14)}
              >
                {"Pricing"}
              </Tab>
              <Tab
                data-plasmic-name={"tab15"}
                data-plasmic-override={overrides.tab15}
                className={classNames("__wab_instance", sty.tab15)}
              >
                {"Contact"}
              </Tab>
            </Stack__>
          ) : null}
          <svg
            className={classNames(projectcss.all, sty.svg__nwWbF)}
            role={"img"}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <IconIcon
              className={classNames(projectcss.all, sty.svg__nm0Om)}
              role={"img"}
            />
          ) : null}
          <Button2
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            className={classNames("__wab_instance", sty.button2, {
              [sty.button2companyPageOpen]: hasVariant(
                $state,
                "companyPageOpen",
                "companyPageOpen"
              )
            })}
            link={"https://calendar.app.google/7GAyDKQLPvjA5rca6"}
            shape={"rounded"}
            showEndIcon={true}
            target={true}
          >
            {"Lets Talk"}
          </Button2>
        </Stack__>
        <div
          className={classNames(projectcss.all, sty.freeBox___17TzM, {
            [sty.freeBoxcompanyPageOpen___17TzM6UNc5]: hasVariant(
              $state,
              "companyPageOpen",
              "companyPageOpen"
            ),
            [sty.freeBoxindustryPageOpen___17TzMaWtv]: hasVariant(
              $state,
              "industryPageOpen",
              "industryPageOpen"
            ),
            [sty.freeBoxservicesPageOpen___17TzMfCmcR]: hasVariant(
              $state,
              "servicesPageOpen",
              "servicesPageOpen"
            )
          })}
        >
          <CompanyTab
            data-plasmic-name={"companyTab"}
            data-plasmic-override={overrides.companyTab}
            className={classNames("__wab_instance", sty.companyTab, {
              [sty.companyTabcompanyPageOpen]: hasVariant(
                $state,
                "companyPageOpen",
                "companyPageOpen"
              ),
              [sty.companyTabservicesPageOpen]: hasVariant(
                $state,
                "servicesPageOpen",
                "servicesPageOpen"
              )
            })}
          />

          <ServicesTab
            data-plasmic-name={"servicesTab"}
            data-plasmic-override={overrides.servicesTab}
            className={classNames("__wab_instance", sty.servicesTab, {
              [sty.servicesTabcompanyPageOpen]: hasVariant(
                $state,
                "companyPageOpen",
                "companyPageOpen"
              ),
              [sty.servicesTabindustryPageOpen]: hasVariant(
                $state,
                "industryPageOpen",
                "industryPageOpen"
              ),
              [sty.servicesTabservicesPageOpen]: hasVariant(
                $state,
                "servicesPageOpen",
                "servicesPageOpen"
              )
            })}
          />

          <IndustryTab
            data-plasmic-name={"industryTab"}
            data-plasmic-override={overrides.industryTab}
            className={classNames("__wab_instance", sty.industryTab, {
              [sty.industryTabcompanyPageOpen]: hasVariant(
                $state,
                "companyPageOpen",
                "companyPageOpen"
              ),
              [sty.industryTabindustryPageOpen]: hasVariant(
                $state,
                "industryPageOpen",
                "industryPageOpen"
              ),
              [sty.industryTabservicesPageOpen]: hasVariant(
                $state,
                "servicesPageOpen",
                "servicesPageOpen"
              )
            })}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox___1Ihlh, {
              [sty.freeBoxcompanyPageOpen___1Ihlh6UNc5]: hasVariant(
                $state,
                "companyPageOpen",
                "companyPageOpen"
              ),
              [sty.freeBoxindustryPageOpen___1IhlhAWtv]: hasVariant(
                $state,
                "industryPageOpen",
                "industryPageOpen"
              ),
              [sty.freeBoxservicesPageOpen___1IhlhFCmcR]: hasVariant(
                $state,
                "servicesPageOpen",
                "servicesPageOpen"
              )
            })}
            onClick={async event => {
              const $steps = {};

              $steps["updateIndustryPageOpen"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "industryPageOpen",
                      operation: 6
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIndustryPageOpen"] != null &&
                typeof $steps["updateIndustryPageOpen"] === "object" &&
                typeof $steps["updateIndustryPageOpen"].then === "function"
              ) {
                $steps["updateIndustryPageOpen"] = await $steps[
                  "updateIndustryPageOpen"
                ];
              }

              $steps["updateServicesPageOpen"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "servicesPageOpen",
                      operation: 6
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateServicesPageOpen"] != null &&
                typeof $steps["updateServicesPageOpen"] === "object" &&
                typeof $steps["updateServicesPageOpen"].then === "function"
              ) {
                $steps["updateServicesPageOpen"] = await $steps[
                  "updateServicesPageOpen"
                ];
              }
            }}
          >
            <Frame20Icon
              className={classNames(projectcss.all, sty.svg__egUvL, {
                [sty.svgcompanyPageOpen__egUvL6UNc5]: hasVariant(
                  $state,
                  "companyPageOpen",
                  "companyPageOpen"
                ),
                [sty.svgindustryPageOpen__egUvLaWtv]: hasVariant(
                  $state,
                  "industryPageOpen",
                  "industryPageOpen"
                ),
                [sty.svgservicesPageOpen__egUvLfCmcR]: hasVariant(
                  $state,
                  "servicesPageOpen",
                  "servicesPageOpen"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateCompanyPageOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "companyPageOpen",
                        operation: 6
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCompanyPageOpen"] != null &&
                  typeof $steps["updateCompanyPageOpen"] === "object" &&
                  typeof $steps["updateCompanyPageOpen"].then === "function"
                ) {
                  $steps["updateCompanyPageOpen"] = await $steps[
                    "updateCompanyPageOpen"
                  ];
                }
              }}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  header: [
    "header",
    "tab2",
    "tab8",
    "tab3",
    "tab7",
    "tab4",
    "tab5",
    "tab6",
    "tab9",
    "tab10",
    "tab11",
    "tab12",
    "tab13",
    "tab14",
    "tab15",
    "button2",
    "companyTab",
    "servicesTab",
    "industryTab"
  ],
  tab2: ["tab2"],
  tab8: ["tab8"],
  tab3: ["tab3"],
  tab7: ["tab7"],
  tab4: ["tab4"],
  tab5: ["tab5"],
  tab6: ["tab6"],
  tab9: ["tab9"],
  tab10: ["tab10"],
  tab11: ["tab11"],
  tab12: ["tab12"],
  tab13: ["tab13"],
  tab14: ["tab14"],
  tab15: ["tab15"],
  button2: ["button2"],
  companyTab: ["companyTab"],
  servicesTab: ["servicesTab"],
  industryTab: ["industryTab"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  header: "div";
  tab2: typeof Tab;
  tab8: typeof Tab;
  tab3: typeof Tab;
  tab7: typeof Tab;
  tab4: typeof Tab;
  tab5: typeof Tab;
  tab6: typeof Tab;
  tab9: typeof Tab;
  tab10: typeof Tab;
  tab11: typeof Tab;
  tab12: typeof Tab;
  tab13: typeof Tab;
  tab14: typeof Tab;
  tab15: typeof Tab;
  button2: typeof Button2;
  companyTab: typeof CompanyTab;
  servicesTab: typeof ServicesTab;
  industryTab: typeof IndustryTab;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavHeader__VariantsArgs;
    args?: PlasmicNavHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavHeader__ArgProps,
          internalVariantPropNames: PlasmicNavHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header") {
    func.displayName = "PlasmicNavHeader";
  } else {
    func.displayName = `PlasmicNavHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicNavHeader = Object.assign(
  // Top-level PlasmicNavHeader renders the root element
  makeNodeComponent("header"),
  {
    // Helper components rendering sub-elements
    tab2: makeNodeComponent("tab2"),
    tab8: makeNodeComponent("tab8"),
    tab3: makeNodeComponent("tab3"),
    tab7: makeNodeComponent("tab7"),
    tab4: makeNodeComponent("tab4"),
    tab5: makeNodeComponent("tab5"),
    tab6: makeNodeComponent("tab6"),
    tab9: makeNodeComponent("tab9"),
    tab10: makeNodeComponent("tab10"),
    tab11: makeNodeComponent("tab11"),
    tab12: makeNodeComponent("tab12"),
    tab13: makeNodeComponent("tab13"),
    tab14: makeNodeComponent("tab14"),
    tab15: makeNodeComponent("tab15"),
    button2: makeNodeComponent("button2"),
    companyTab: makeNodeComponent("companyTab"),
    servicesTab: makeNodeComponent("servicesTab"),
    industryTab: makeNodeComponent("industryTab"),

    // Metadata about props expected for PlasmicNavHeader
    internalVariantProps: PlasmicNavHeader__VariantProps,
    internalArgProps: PlasmicNavHeader__ArgProps
  }
);

export default PlasmicNavHeader;
/* prettier-ignore-end */
