// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: N0zyKDoi7jWj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: iFFcBUnvZUl0/component

import { useScreenVariants as useScreenVariantsptc9VYm7Ur9B } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PTC9vYM7UR9b/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicPricingCard.module.css"; // plasmic-import: N0zyKDoi7jWj/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tSFoGfIVWAwT/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: FoPRmBUdi-FM/icon
import Frame17Icon from "./icons/PlasmicIcon__Frame17"; // plasmic-import: qCObakUSkcsr/icon

createPlasmicElementProxy;

export type PlasmicPricingCard__VariantMembers = {
  colours: "white";
};
export type PlasmicPricingCard__VariantsArgs = {
  colours?: MultiChoiceArg<"white">;
};
type VariantPropType = keyof PlasmicPricingCard__VariantsArgs;
export const PlasmicPricingCard__VariantProps = new Array<VariantPropType>(
  "colours"
);

export type PlasmicPricingCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPricingCard__ArgsType;
export const PlasmicPricingCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5",
  "slot6",
  "slot7",
  "slot8",
  "slot9",
  "slot10",
  "slot11",
  "slot12"
);

export type PlasmicPricingCard__OverridesType = {
  pricingCard?: Flex__<"div">;
  planPricing?: Flex__<"div">;
  button2?: Flex__<typeof Button2>;
  features?: Flex__<"div">;
};

export interface DefaultPricingCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
  colours?: MultiChoiceArg<"white">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPricingCard__RenderFunc(props: {
  variants: PlasmicPricingCard__VariantsArgs;
  args: PlasmicPricingCard__ArgsType;
  overrides: PlasmicPricingCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "colours",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.colours
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsptc9VYm7Ur9B()
  });

  return (
    <div
      data-plasmic-name={"pricingCard"}
      data-plasmic-override={overrides.pricingCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_vidyayatan_landing_page_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.pricingCard
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"planPricing"}
        data-plasmic-override={overrides.planPricing}
        hasGap={true}
        className={classNames(projectcss.all, sty.planPricing, {
          [sty.planPricingcolours_white]: hasVariant($state, "colours", "white")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__ra1P2, {
            [sty.freeBoxcolours_white__ra1P2PzrVz]: hasVariant(
              $state,
              "colours",
              "white"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__saGlc, {
              [sty.freeBoxcolours_white__saGlcPzrVz]: hasVariant(
                $state,
                "colours",
                "white"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "Product Teams",
              value: args.slot,
              className: classNames(sty.slotTargetSlot, {
                [sty.slotTargetSlotcolours_white]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__uADc0, {
              [sty.freeBoxcolours_white__uADc0PzrVz]: hasVariant(
                $state,
                "colours",
                "white"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents:
                "Experienced full-time teams to build your product",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrencolours_white]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })
            })}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__o2PLg)}>
          <div
            className={classNames(projectcss.all, sty.freeBox__utQ6T, {
              [sty.freeBoxcolours_white__utQ6TpzrVz]: hasVariant(
                $state,
                "colours",
                "white"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "Starting at",
              value: args.slot12,
              className: classNames(sty.slotTargetSlot12, {
                [sty.slotTargetSlot12colours_white]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__kIas, {
              [sty.freeBoxcolours_white__kIasPzrVz]: hasVariant(
                $state,
                "colours",
                "white"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "$ 4,799",
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2, {
                [sty.slotTargetSlot2colours_white]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__bm9Yt, {
              [sty.freeBoxcolours_white__bm9YtPzrVz]: hasVariant(
                $state,
                "colours",
                "white"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "per month",
              value: args.slot10,
              className: classNames(sty.slotTargetSlot10, {
                [sty.slotTargetSlot10colours_white]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })
            })}
          </div>
        </div>
        <Button2
          data-plasmic-name={"button2"}
          data-plasmic-override={overrides.button2}
          className={classNames("__wab_instance", sty.button2, {
            [sty.button2colours_white]: hasVariant($state, "colours", "white")
          })}
          color={hasVariant($state, "colours", "white") ? undefined : "white"}
          link={"https://calendar.app.google/7GAyDKQLPvjA5rca6"}
          shape={"rounded"}
          showEndIcon={true}
        >
          {"Book Meeting"}
        </Button2>
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox__g7Vz, {
          [sty.freeBoxcolours_white__g7VzPzrVz]: hasVariant(
            $state,
            "colours",
            "white"
          )
        })}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"features"}
        data-plasmic-override={overrides.features}
        hasGap={true}
        className={classNames(projectcss.all, sty.features, {
          [sty.featurescolours_white]: hasVariant($state, "colours", "white")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__zsbHq, {
            [sty.freeBoxcolours_white__zsbHqPzrVz]: hasVariant(
              $state,
              "colours",
              "white"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: "FEATURES",
            value: args.slot3,
            className: classNames(sty.slotTargetSlot3, {
              [sty.slotTargetSlot3colours_white]: hasVariant(
                $state,
                "colours",
                "white"
              )
            })
          })}
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__f6MJd, {
            [sty.freeBoxcolours_white__f6MJdPzrVz]: hasVariant(
              $state,
              "colours",
              "white"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nPyu6)}
          >
            <Frame17Icon
              className={classNames(projectcss.all, sty.svg__sARbN, {
                [sty.svgcolours_white__sARbNpzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
              role={"img"}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__eTyDn, {
                [sty.freeBoxcolours_white__eTyDnpzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "Free consultation and no upfront fees",
                value: args.slot4,
                className: classNames(sty.slotTargetSlot4, {
                  [sty.slotTargetSlot4colours_white]: hasVariant(
                    $state,
                    "colours",
                    "white"
                  )
                })
              })}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__brry5)}
          >
            <Frame17Icon
              className={classNames(projectcss.all, sty.svg__zEtdx, {
                [sty.svgcolours_white__zEtdxpzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
              role={"img"}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__xeXcb, {
                [sty.freeBoxcolours_white__xeXcbpzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "Cost-effective, fixed monthly rates",
                value: args.slot5,
                className: classNames(sty.slotTargetSlot5, {
                  [sty.slotTargetSlot5colours_white]: hasVariant(
                    $state,
                    "colours",
                    "white"
                  )
                })
              })}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___4OQx)}
          >
            <Frame17Icon
              className={classNames(projectcss.all, sty.svg__gJ6ON, {
                [sty.svgcolours_white__gJ6ONpzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
              role={"img"}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__jxhV0, {
                [sty.freeBoxcolours_white__jxhV0PzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "Scale up with 1 month's notice",
                value: args.slot6,
                className: classNames(sty.slotTargetSlot6, {
                  [sty.slotTargetSlot6colours_white]: hasVariant(
                    $state,
                    "colours",
                    "white"
                  )
                })
              })}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hdOts)}
          >
            <Frame17Icon
              className={classNames(projectcss.all, sty.svg__gWllE, {
                [sty.svgcolours_white__gWllEpzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
              role={"img"}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__y8JZ4, {
                [sty.freeBoxcolours_white__y8JZ4PzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "Free oversight from the head of engineering",
                value: args.slot7,
                className: classNames(sty.slotTargetSlot7, {
                  [sty.slotTargetSlot7colours_white]: hasVariant(
                    $state,
                    "colours",
                    "white"
                  )
                })
              })}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___41PsW)}
          >
            <Frame17Icon
              className={classNames(projectcss.all, sty.svg__dNhBz, {
                [sty.svgcolours_white__dNhBzpzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
              role={"img"}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__yfQpC, {
                [sty.freeBoxcolours_white__yfQpCpzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "Commit to 95% user stories in production",
                value: args.slot8,
                className: classNames(sty.slotTargetSlot8, {
                  [sty.slotTargetSlot8colours_white]: hasVariant(
                    $state,
                    "colours",
                    "white"
                  )
                })
              })}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hgAHc)}
          >
            <Frame17Icon
              className={classNames(projectcss.all, sty.svg__uimMm, {
                [sty.svgcolours_white__uimMmpzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
              role={"img"}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__tzvV, {
                [sty.freeBoxcolours_white__tzvVpzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "82 NPS",
                value: args.slot9,
                className: classNames(sty.slotTargetSlot9, {
                  [sty.slotTargetSlot9colours_white]: hasVariant(
                    $state,
                    "colours",
                    "white"
                  )
                })
              })}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__zeuP9)}
          >
            <Frame17Icon
              className={classNames(projectcss.all, sty.svg__a4Nn4, {
                [sty.svgcolours_white__a4Nn4PzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
              role={"img"}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__jlwRb, {
                [sty.freeBoxcolours_white__jlwRbPzrVz]: hasVariant(
                  $state,
                  "colours",
                  "white"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "82 NPS",
                value: args.slot11,
                className: classNames(sty.slotTargetSlot11, {
                  [sty.slotTargetSlot11colours_white]: hasVariant(
                    $state,
                    "colours",
                    "white"
                  )
                })
              })}
            </div>
          </Stack__>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pricingCard: ["pricingCard", "planPricing", "button2", "features"],
  planPricing: ["planPricing", "button2"],
  button2: ["button2"],
  features: ["features"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  pricingCard: "div";
  planPricing: "div";
  button2: typeof Button2;
  features: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricingCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricingCard__VariantsArgs;
    args?: PlasmicPricingCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPricingCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPricingCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPricingCard__ArgProps,
          internalVariantPropNames: PlasmicPricingCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPricingCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pricingCard") {
    func.displayName = "PlasmicPricingCard";
  } else {
    func.displayName = `PlasmicPricingCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingCard = Object.assign(
  // Top-level PlasmicPricingCard renders the root element
  makeNodeComponent("pricingCard"),
  {
    // Helper components rendering sub-elements
    planPricing: makeNodeComponent("planPricing"),
    button2: makeNodeComponent("button2"),
    features: makeNodeComponent("features"),

    // Metadata about props expected for PlasmicPricingCard
    internalVariantProps: PlasmicPricingCard__VariantProps,
    internalArgProps: PlasmicPricingCard__ArgProps
  }
);

export default PlasmicPricingCard;
/* prettier-ignore-end */
