// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: GOGTEeayq0FO

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: iFFcBUnvZUl0/component

import { useScreenVariants as useScreenVariantsptc9VYm7Ur9B } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PTC9vYM7UR9b/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicWeExcelInSection.module.css"; // plasmic-import: GOGTEeayq0FO/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tSFoGfIVWAwT/icon
import Frame18Icon from "./icons/PlasmicIcon__Frame18"; // plasmic-import: n4n-qgslZ89z/icon

createPlasmicElementProxy;

export type PlasmicWeExcelInSection__VariantMembers = {};
export type PlasmicWeExcelInSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicWeExcelInSection__VariantsArgs;
export const PlasmicWeExcelInSection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWeExcelInSection__ArgsType = {};
type ArgPropType = keyof PlasmicWeExcelInSection__ArgsType;
export const PlasmicWeExcelInSection__ArgProps = new Array<ArgPropType>();

export type PlasmicWeExcelInSection__OverridesType = {
  weExcelInSection?: Flex__<"section">;
  fields?: Flex__<"div">;
  agritech?: Flex__<"div">;
  saaSCrmDevelopment?: Flex__<"div">;
  fields2?: Flex__<"div">;
  industrialAutomation?: Flex__<"div">;
  bankingFinancialServices?: Flex__<"div">;
  fields3?: Flex__<"div">;
  industrialAutomation2?: Flex__<"div">;
  bankingFinancialServices2?: Flex__<"div">;
  fields4?: Flex__<"div">;
  industrialAutomation3?: Flex__<"div">;
  bankingFinancialServices3?: Flex__<"div">;
  button2?: Flex__<typeof Button2>;
  svg?: Flex__<"svg">;
};

export interface DefaultWeExcelInSectionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWeExcelInSection__RenderFunc(props: {
  variants: PlasmicWeExcelInSection__VariantsArgs;
  args: PlasmicWeExcelInSection__ArgsType;
  overrides: PlasmicWeExcelInSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsptc9VYm7Ur9B()
  });

  return (
    <section
      data-plasmic-name={"weExcelInSection"}
      data-plasmic-override={overrides.weExcelInSection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_vidyayatan_landing_page_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.weExcelInSection
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__nrLbu)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__mtrsV)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xgwU5
            )}
          >
            {"Pioneering Excellence \nin Multiple Domains"}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__foi0V)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1R3Td
            )}
          >
            {
              "With a focus on Agritech, SaaS/CRM Development, Industrial Automation, and Financial Services, our expertise is your key to unlocking innovation and achieving sustainable growth."
            }
          </div>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__chAQt)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"fields"}
          data-plasmic-override={overrides.fields}
          hasGap={true}
          className={classNames(projectcss.all, sty.fields)}
        >
          <div className={classNames(projectcss.all, sty.column___7GZnZ)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tiISb)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"agritech"}
                data-plasmic-override={overrides.agritech}
                hasGap={true}
                className={classNames(projectcss.all, sty.agritech)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e33H7
                  )}
                >
                  {"Agritech"}
                </div>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column___4Phrh)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1XzbX)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"saaSCrmDevelopment"}
                data-plasmic-override={overrides.saaSCrmDevelopment}
                hasGap={true}
                className={classNames(projectcss.all, sty.saaSCrmDevelopment)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tXcZ
                  )}
                >
                  {"Security"}
                </div>
              </Stack__>
            </Stack__>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"fields2"}
          data-plasmic-override={overrides.fields2}
          hasGap={true}
          className={classNames(projectcss.all, sty.fields2)}
        >
          <div className={classNames(projectcss.all, sty.column___1ZyLp)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nrMf5)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"industrialAutomation"}
                data-plasmic-override={overrides.industrialAutomation}
                hasGap={true}
                className={classNames(projectcss.all, sty.industrialAutomation)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wsFqm
                  )}
                >
                  {"Access Control"}
                </div>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column__jN6Sl)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__joqca)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"bankingFinancialServices"}
                data-plasmic-override={overrides.bankingFinancialServices}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.bankingFinancialServices
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToEdtechPage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/ed-tech` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToEdtechPage"] != null &&
                    typeof $steps["goToEdtechPage"] === "object" &&
                    typeof $steps["goToEdtechPage"].then === "function"
                  ) {
                    $steps["goToEdtechPage"] = await $steps["goToEdtechPage"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i4U8F
                  )}
                >
                  {"Ed Tech"}
                </div>
              </Stack__>
            </Stack__>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"fields3"}
          data-plasmic-override={overrides.fields3}
          hasGap={true}
          className={classNames(projectcss.all, sty.fields3)}
        >
          <div className={classNames(projectcss.all, sty.column__gh2Y)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fqKzn)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"industrialAutomation2"}
                data-plasmic-override={overrides.industrialAutomation2}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.industrialAutomation2
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___99ScD
                  )}
                >
                  {"Health Tech"}
                </div>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column___1MfM)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gZOvL)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"bankingFinancialServices2"}
                data-plasmic-override={overrides.bankingFinancialServices2}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.bankingFinancialServices2
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rzTEe
                  )}
                >
                  {"Manufacturing"}
                </div>
              </Stack__>
            </Stack__>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"fields4"}
          data-plasmic-override={overrides.fields4}
          hasGap={true}
          className={classNames(projectcss.all, sty.fields4)}
        >
          <div className={classNames(projectcss.all, sty.column__yedbt)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wkEix)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"industrialAutomation3"}
                data-plasmic-override={overrides.industrialAutomation3}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.industrialAutomation3
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wOur
                  )}
                >
                  {"FMCG Companies"}
                </div>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column__p0NBr)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qELy)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"bankingFinancialServices3"}
                data-plasmic-override={overrides.bankingFinancialServices3}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.bankingFinancialServices3
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ddK5A
                  )}
                >
                  {"Fintech"}
                </div>
              </Stack__>
            </Stack__>
          </div>
        </Stack__>
      </Stack__>
      <Button2
        data-plasmic-name={"button2"}
        data-plasmic-override={overrides.button2}
        className={classNames("__wab_instance", sty.button2)}
        endIcon={
          <Frame18Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
        link={`/product-page`}
        shape={"rounded"}
      >
        {"View Products"}
      </Button2>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  weExcelInSection: [
    "weExcelInSection",
    "fields",
    "agritech",
    "saaSCrmDevelopment",
    "fields2",
    "industrialAutomation",
    "bankingFinancialServices",
    "fields3",
    "industrialAutomation2",
    "bankingFinancialServices2",
    "fields4",
    "industrialAutomation3",
    "bankingFinancialServices3",
    "button2",
    "svg"
  ],
  fields: ["fields", "agritech", "saaSCrmDevelopment"],
  agritech: ["agritech"],
  saaSCrmDevelopment: ["saaSCrmDevelopment"],
  fields2: ["fields2", "industrialAutomation", "bankingFinancialServices"],
  industrialAutomation: ["industrialAutomation"],
  bankingFinancialServices: ["bankingFinancialServices"],
  fields3: ["fields3", "industrialAutomation2", "bankingFinancialServices2"],
  industrialAutomation2: ["industrialAutomation2"],
  bankingFinancialServices2: ["bankingFinancialServices2"],
  fields4: ["fields4", "industrialAutomation3", "bankingFinancialServices3"],
  industrialAutomation3: ["industrialAutomation3"],
  bankingFinancialServices3: ["bankingFinancialServices3"],
  button2: ["button2", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  weExcelInSection: "section";
  fields: "div";
  agritech: "div";
  saaSCrmDevelopment: "div";
  fields2: "div";
  industrialAutomation: "div";
  bankingFinancialServices: "div";
  fields3: "div";
  industrialAutomation2: "div";
  bankingFinancialServices2: "div";
  fields4: "div";
  industrialAutomation3: "div";
  bankingFinancialServices3: "div";
  button2: typeof Button2;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWeExcelInSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWeExcelInSection__VariantsArgs;
    args?: PlasmicWeExcelInSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWeExcelInSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWeExcelInSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWeExcelInSection__ArgProps,
          internalVariantPropNames: PlasmicWeExcelInSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWeExcelInSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "weExcelInSection") {
    func.displayName = "PlasmicWeExcelInSection";
  } else {
    func.displayName = `PlasmicWeExcelInSection.${nodeName}`;
  }
  return func;
}

export const PlasmicWeExcelInSection = Object.assign(
  // Top-level PlasmicWeExcelInSection renders the root element
  makeNodeComponent("weExcelInSection"),
  {
    // Helper components rendering sub-elements
    fields: makeNodeComponent("fields"),
    agritech: makeNodeComponent("agritech"),
    saaSCrmDevelopment: makeNodeComponent("saaSCrmDevelopment"),
    fields2: makeNodeComponent("fields2"),
    industrialAutomation: makeNodeComponent("industrialAutomation"),
    bankingFinancialServices: makeNodeComponent("bankingFinancialServices"),
    fields3: makeNodeComponent("fields3"),
    industrialAutomation2: makeNodeComponent("industrialAutomation2"),
    bankingFinancialServices2: makeNodeComponent("bankingFinancialServices2"),
    fields4: makeNodeComponent("fields4"),
    industrialAutomation3: makeNodeComponent("industrialAutomation3"),
    bankingFinancialServices3: makeNodeComponent("bankingFinancialServices3"),
    button2: makeNodeComponent("button2"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicWeExcelInSection
    internalVariantProps: PlasmicWeExcelInSection__VariantProps,
    internalArgProps: PlasmicWeExcelInSection__ArgProps
  }
);

export default PlasmicWeExcelInSection;
/* prettier-ignore-end */
