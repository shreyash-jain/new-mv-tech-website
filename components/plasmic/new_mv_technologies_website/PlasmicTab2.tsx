// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: i1-t57rGFqt8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicTab2.module.css"; // plasmic-import: i1-t57rGFqt8/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tSFoGfIVWAwT/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: FoPRmBUdi-FM/icon

createPlasmicElementProxy;

export type PlasmicTab2__VariantMembers = {};
export type PlasmicTab2__VariantsArgs = {};
type VariantPropType = keyof PlasmicTab2__VariantsArgs;
export const PlasmicTab2__VariantProps = new Array<VariantPropType>();

export type PlasmicTab2__ArgsType = {
  startIcon?: React.ReactNode;
  children?: React.ReactNode;
  endIcon?: React.ReactNode;
  isActive?: boolean;
  onIsActiveChange2?: (val: string) => void;
  pageRoute?: string;
};
type ArgPropType = keyof PlasmicTab2__ArgsType;
export const PlasmicTab2__ArgProps = new Array<ArgPropType>(
  "startIcon",
  "children",
  "endIcon",
  "isActive",
  "onIsActiveChange2",
  "pageRoute"
);

export type PlasmicTab2__OverridesType = {
  root?: Flex__<"div">;
  tab?: Flex__<"div">;
  button?: Flex__<"button">;
  startIconContainer?: Flex__<"div">;
  contentContainer?: Flex__<"div">;
  endIconContainer?: Flex__<"div">;
};

export interface DefaultTab2Props {
  startIcon?: React.ReactNode;
  children?: React.ReactNode;
  endIcon?: React.ReactNode;
  isActive?: boolean;
  onIsActiveChange2?: (val: string) => void;
  pageRoute?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTab2__RenderFunc(props: {
  variants: PlasmicTab2__VariantsArgs;
  args: PlasmicTab2__ArgsType;
  overrides: PlasmicTab2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isActive",
        type: "writable",
        variableType: "boolean",

        valueProp: "isActive",
        onChangeProp: "onIsActiveChange2"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_vidyayatan_landing_page_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.root
      )}
      onClick={async event => {
        const $steps = {};

        $steps["goToPage"] = true
          ? (() => {
              const actionArgs = {
                destination: (() => {
                  try {
                    return $props.pageRoute;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              };
              return (({ destination }) => {
                if (
                  typeof destination === "string" &&
                  destination.startsWith("#")
                ) {
                  document
                    .getElementById(destination.substr(1))
                    .scrollIntoView({ behavior: "smooth" });
                } else {
                  __nextRouter?.push(destination);
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["goToPage"] != null &&
          typeof $steps["goToPage"] === "object" &&
          typeof $steps["goToPage"].then === "function"
        ) {
          $steps["goToPage"] = await $steps["goToPage"];
        }
      }}
    >
      <div
        data-plasmic-name={"tab"}
        data-plasmic-override={overrides.tab}
        className={classNames(projectcss.all, sty.tab)}
      >
        <Stack__
          as={"button"}
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.button, sty.button)}
        >
          {false ? (
            <div
              data-plasmic-name={"startIconContainer"}
              data-plasmic-override={overrides.startIconContainer}
              className={classNames(projectcss.all, sty.startIconContainer)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <CheckSvgIcon
                    className={classNames(projectcss.all, sty.svg__i65Ej)}
                    role={"img"}
                  />
                ),

                value: args.startIcon,
                className: classNames(sty.slotTargetStartIcon)
              })}
            </div>
          ) : null}
          <div
            data-plasmic-name={"contentContainer"}
            data-plasmic-override={overrides.contentContainer}
            className={classNames(projectcss.all, sty.contentContainer)}
          >
            {renderPlasmicSlot({
              defaultContents: "Tab",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
          {false ? (
            <div
              data-plasmic-name={"endIconContainer"}
              data-plasmic-override={overrides.endIconContainer}
              className={classNames(projectcss.all, sty.endIconContainer)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg___1NFcw)}
                    role={"img"}
                  />
                ),

                value: args.endIcon,
                className: classNames(sty.slotTargetEndIcon)
              })}
            </div>
          ) : null}
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tab",
    "button",
    "startIconContainer",
    "contentContainer",
    "endIconContainer"
  ],
  tab: [
    "tab",
    "button",
    "startIconContainer",
    "contentContainer",
    "endIconContainer"
  ],
  button: [
    "button",
    "startIconContainer",
    "contentContainer",
    "endIconContainer"
  ],
  startIconContainer: ["startIconContainer"],
  contentContainer: ["contentContainer"],
  endIconContainer: ["endIconContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tab: "div";
  button: "button";
  startIconContainer: "div";
  contentContainer: "div";
  endIconContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTab2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTab2__VariantsArgs;
    args?: PlasmicTab2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTab2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTab2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTab2__ArgProps,
          internalVariantPropNames: PlasmicTab2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTab2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTab2";
  } else {
    func.displayName = `PlasmicTab2.${nodeName}`;
  }
  return func;
}

export const PlasmicTab2 = Object.assign(
  // Top-level PlasmicTab2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tab: makeNodeComponent("tab"),
    button: makeNodeComponent("button"),
    startIconContainer: makeNodeComponent("startIconContainer"),
    contentContainer: makeNodeComponent("contentContainer"),
    endIconContainer: makeNodeComponent("endIconContainer"),

    // Metadata about props expected for PlasmicTab2
    internalVariantProps: PlasmicTab2__VariantProps,
    internalArgProps: PlasmicTab2__ArgProps
  }
);

export default PlasmicTab2;
/* prettier-ignore-end */
