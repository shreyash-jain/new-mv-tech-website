// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qg9BUJrNtisePZMs8FM4BQ
// Component: IzU1KfsmeHnj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: iFFcBUnvZUl0/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_vidyayatan_landing_page_css from "../vidyayatan_landing_page/plasmic.module.css"; // plasmic-import: aqUnUFeSAtbFb77THsmBtm/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_apple_css from "../apple/plasmic.module.css"; // plasmic-import: 3eY1qD8fYUzK6iRzHmP8VZ/projectcss
import plasmic_vercel_workflow_css from "../vercel_workflow/plasmic.module.css"; // plasmic-import: 9geyujr9Gmmnu34Qh9ic8E/projectcss
import plasmic_saa_s_website_css from "../saa_s_website/plasmic.module.css"; // plasmic-import: ybfbkvuYhwx2f8pSa8cKG/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qg9BUJrNtisePZMs8FM4BQ/projectcss
import sty from "./PlasmicCaseStudyCard.module.css"; // plasmic-import: IzU1KfsmeHnj/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tSFoGfIVWAwT/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: FoPRmBUdi-FM/icon

createPlasmicElementProxy;

export type PlasmicCaseStudyCard__VariantMembers = {
  screen: "mobile";
};
export type PlasmicCaseStudyCard__VariantsArgs = {
  screen?: SingleChoiceArg<"mobile">;
};
type VariantPropType = keyof PlasmicCaseStudyCard__VariantsArgs;
export const PlasmicCaseStudyCard__VariantProps = new Array<VariantPropType>(
  "screen"
);

export type PlasmicCaseStudyCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCaseStudyCard__ArgsType;
export const PlasmicCaseStudyCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicCaseStudyCard__OverridesType = {
  mobile?: Flex__<"div">;
  caseStudyCard?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultCaseStudyCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  screen?: SingleChoiceArg<"mobile">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCaseStudyCard__RenderFunc(props: {
  variants: PlasmicCaseStudyCard__VariantsArgs;
  args: PlasmicCaseStudyCard__ArgsType;
  overrides: PlasmicCaseStudyCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "screen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.screen
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"mobile"}
      data-plasmic-override={overrides.mobile}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_vidyayatan_landing_page_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_apple_css.plasmic_tokens,
        plasmic_vercel_workflow_css.plasmic_tokens,
        plasmic_saa_s_website_css.plasmic_tokens,
        sty.mobile,
        { [sty.mobilescreen_mobile]: hasVariant($state, "screen", "mobile") }
      )}
    >
      <div
        data-plasmic-name={"caseStudyCard"}
        data-plasmic-override={overrides.caseStudyCard}
        className={classNames(projectcss.all, sty.caseStudyCard, {
          [sty.caseStudyCardscreen_mobile]: hasVariant(
            $state,
            "screen",
            "mobile"
          )
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxscreen_mobile]: hasVariant($state, "screen", "mobile")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7YUeD)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__o6Z25)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"48px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_mv_technologies_website/images/labourLinkLogo2Png.png",
                      fullWidth: 300,
                      fullHeight: 300,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__txJqm
                    )}
                  >
                    {"Labour Link"}
                  </div>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__acCkq)}
                    shape={"rounded"}
                  >
                    {"Explore"}
                  </Button2>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yx8Wr
                  )}
                >
                  {
                    "Vidyayatan Technologies' Labor Link system simplifies managing farm laborers, HR, security, and finance. It offers legal support for compliance and efficiency, automating processes to boost productivity and ensure smooth operations."
                  }
                </div>
              </React.Fragment>
            ),
            value: args.children
          })}
        </Stack__>
        {renderPlasmicSlot({
          defaultContents: (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__yx60T)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/new_mv_technologies_website/images/labourLinkPng3.png",
                fullWidth: 6264,
                fullHeight: 3928,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.slot
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mobile: ["mobile", "caseStudyCard", "freeBox"],
  caseStudyCard: ["caseStudyCard", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mobile: "div";
  caseStudyCard: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCaseStudyCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCaseStudyCard__VariantsArgs;
    args?: PlasmicCaseStudyCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCaseStudyCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCaseStudyCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCaseStudyCard__ArgProps,
          internalVariantPropNames: PlasmicCaseStudyCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCaseStudyCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mobile") {
    func.displayName = "PlasmicCaseStudyCard";
  } else {
    func.displayName = `PlasmicCaseStudyCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCaseStudyCard = Object.assign(
  // Top-level PlasmicCaseStudyCard renders the root element
  makeNodeComponent("mobile"),
  {
    // Helper components rendering sub-elements
    caseStudyCard: makeNodeComponent("caseStudyCard"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicCaseStudyCard
    internalVariantProps: PlasmicCaseStudyCard__VariantProps,
    internalArgProps: PlasmicCaseStudyCard__ArgProps
  }
);

export default PlasmicCaseStudyCard;
/* prettier-ignore-end */
